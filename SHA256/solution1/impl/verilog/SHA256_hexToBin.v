// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module SHA256_hexToBin (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        string_r_address0,
        string_r_ce0,
        string_r_q0,
        bits_address0,
        bits_ce0,
        bits_we0,
        bits_d0,
        bits_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_pp1_stage0 = 9'd64;
parameter    ap_ST_fsm_pp1_stage1 = 9'd128;
parameter    ap_ST_fsm_state10 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] string_r_address0;
output   string_r_ce0;
input  [7:0] string_r_q0;
output  [3:0] bits_address0;
output   bits_ce0;
output   bits_we0;
output  [6:0] bits_d0;
input  [6:0] bits_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg string_r_ce0;
reg[3:0] bits_address0;
reg bits_ce0;
reg bits_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] p_str_25_address0;
reg    p_str_25_ce0;
wire   [7:0] p_str_25_q0;
reg   [2:0] p_str_24_address0;
reg    p_str_24_ce0;
wire   [7:0] p_str_24_q0;
reg   [2:0] p_str_23_address0;
reg    p_str_23_ce0;
wire   [7:0] p_str_23_q0;
reg   [2:0] p_str_22_address0;
reg    p_str_22_ce0;
wire   [7:0] p_str_22_q0;
reg   [2:0] p_str_21_address0;
reg    p_str_21_ce0;
wire   [7:0] p_str_21_q0;
reg   [2:0] p_str_20_address0;
reg    p_str_20_ce0;
wire   [7:0] p_str_20_q0;
reg   [2:0] p_str_19_address0;
reg    p_str_19_ce0;
wire   [7:0] p_str_19_q0;
wire   [2:0] p_str_18_address0;
reg    p_str_18_ce0;
wire   [7:0] p_str_18_q0;
wire   [2:0] p_str_17_address0;
reg    p_str_17_ce0;
wire   [7:0] p_str_17_q0;
wire   [2:0] p_str_16_address0;
reg    p_str_16_ce0;
wire   [7:0] p_str_16_q0;
wire   [2:0] p_str_15_address0;
reg    p_str_15_ce0;
wire   [7:0] p_str_15_q0;
wire   [2:0] p_str_14_address0;
reg    p_str_14_ce0;
wire   [7:0] p_str_14_q0;
wire   [2:0] p_str_13_address0;
reg    p_str_13_ce0;
wire   [7:0] p_str_13_q0;
wire   [2:0] p_str_12_address0;
reg    p_str_12_ce0;
wire   [7:0] p_str_12_q0;
wire   [2:0] p_str_11_address0;
reg    p_str_11_ce0;
wire   [7:0] p_str_11_q0;
wire   [2:0] p_str_10_address0;
reg    p_str_10_ce0;
wire   [7:0] p_str_10_q0;
wire   [2:0] p_str_9_address0;
reg    p_str_9_ce0;
wire   [7:0] p_str_9_q0;
reg   [63:0] j_reg_568;
reg   [6:0] empty_reg_603;
reg   [3:0] i_2_reg_656;
wire   [63:0] add_ln322_fu_665_p2;
reg   [63:0] add_ln322_reg_935;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln318_fu_671_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln319_fu_687_p2;
wire    ap_CS_fsm_state4;
wire   [63:0] add_ln450_fu_693_p2;
wire    ap_CS_fsm_state5;
wire   [3:0] trunc_ln457_fu_705_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
reg   [4:0] retval_0_i8_reg_480;
wire   [2:0] p_str_19_addr_gep_fu_398_p3;
wire   [2:0] p_str_20_addr_gep_fu_406_p3;
wire   [2:0] p_str_21_addr_gep_fu_414_p3;
wire   [2:0] p_str_22_addr_gep_fu_422_p3;
wire   [2:0] p_str_23_addr_gep_fu_430_p3;
wire   [2:0] p_str_24_addr_gep_fu_438_p3;
wire   [63:0] add_ln463_fu_709_p2;
reg   [63:0] add_ln463_reg_1089;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state8_pp1_stage1_iter0;
wire    ap_block_pp1_stage1_11001;
wire   [0:0] icmp_ln460_fu_918_p2;
reg   [0:0] icmp_ln460_reg_1094;
wire   [3:0] add_ln462_fu_929_p2;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage1_subdone;
reg    ap_condition_pp1_flush_enable;
wire    ap_block_pp1_stage0_subdone;
reg   [63:0] i_reg_467;
wire    ap_CS_fsm_state10;
reg   [63:0] i_1_reg_555;
wire   [0:0] icmp_ln449_fu_699_p2;
reg   [63:0] ap_phi_mux_j_phi_fu_572_p4;
wire    ap_block_pp1_stage0;
reg   [6:0] ap_phi_mux_empty_phi_fu_607_p46;
wire   [6:0] trunc_ln460_fu_913_p1;
wire   [6:0] ap_phi_reg_pp1_iter0_empty_reg_603;
wire   [6:0] zext_ln460_fu_908_p1;
wire   [6:0] zext_ln460_1_fu_899_p1;
wire   [6:0] zext_ln460_2_fu_890_p1;
wire   [6:0] zext_ln460_3_fu_881_p1;
wire   [6:0] zext_ln460_4_fu_872_p1;
wire   [6:0] zext_ln460_5_fu_863_p1;
wire   [6:0] zext_ln460_6_fu_854_p1;
wire   [6:0] zext_ln460_7_fu_845_p1;
wire   [6:0] zext_ln460_8_fu_836_p1;
wire   [6:0] zext_ln460_9_fu_827_p1;
wire   [6:0] zext_ln460_10_fu_818_p1;
wire   [6:0] zext_ln460_11_fu_809_p1;
wire   [6:0] zext_ln460_12_fu_800_p1;
wire   [6:0] zext_ln460_13_fu_791_p1;
wire   [6:0] zext_ln460_14_fu_782_p1;
wire   [6:0] zext_ln460_15_fu_773_p1;
wire   [6:0] zext_ln460_16_fu_764_p1;
wire   [6:0] zext_ln460_17_fu_755_p1;
wire   [6:0] zext_ln460_18_fu_746_p1;
wire   [6:0] zext_ln460_19_fu_737_p1;
wire   [6:0] zext_ln460_20_fu_728_p1;
wire   [6:0] zext_ln460_21_fu_719_p1;
wire   [63:0] i_2_cast1_fu_924_p1;
wire   [62:0] tmp_fu_677_p4;
wire    ap_block_pp1_stage1;
wire   [5:0] trunc_ln460_22_fu_715_p1;
wire   [5:0] trunc_ln460_21_fu_724_p1;
wire   [5:0] trunc_ln460_20_fu_733_p1;
wire   [5:0] trunc_ln460_19_fu_742_p1;
wire   [5:0] trunc_ln460_18_fu_751_p1;
wire   [5:0] trunc_ln460_17_fu_760_p1;
wire   [5:0] trunc_ln460_16_fu_769_p1;
wire   [5:0] trunc_ln460_15_fu_778_p1;
wire   [5:0] trunc_ln460_14_fu_787_p1;
wire   [5:0] trunc_ln460_13_fu_796_p1;
wire   [5:0] trunc_ln460_12_fu_805_p1;
wire   [5:0] trunc_ln460_11_fu_814_p1;
wire   [5:0] trunc_ln460_10_fu_823_p1;
wire   [5:0] trunc_ln460_9_fu_832_p1;
wire   [5:0] trunc_ln460_8_fu_841_p1;
wire   [5:0] trunc_ln460_7_fu_850_p1;
wire   [5:0] trunc_ln460_6_fu_859_p1;
wire   [5:0] trunc_ln460_5_fu_868_p1;
wire   [5:0] trunc_ln460_4_fu_877_p1;
wire   [5:0] trunc_ln460_3_fu_886_p1;
wire   [5:0] trunc_ln460_2_fu_895_p1;
wire   [5:0] trunc_ln460_1_fu_904_p1;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_362;
reg    ap_condition_378;
reg    ap_condition_614;
reg    ap_condition_875;
reg    ap_condition_557;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

SHA256_hexToBin_p_str_25 #(
    .DataWidth( 8 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
p_str_25_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str_25_address0),
    .ce0(p_str_25_ce0),
    .q0(p_str_25_q0)
);

SHA256_hexToBin_p_str_24 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
p_str_24_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str_24_address0),
    .ce0(p_str_24_ce0),
    .q0(p_str_24_q0)
);

SHA256_hexToBin_p_str_23 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
p_str_23_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str_23_address0),
    .ce0(p_str_23_ce0),
    .q0(p_str_23_q0)
);

SHA256_hexToBin_p_str_22 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
p_str_22_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str_22_address0),
    .ce0(p_str_22_ce0),
    .q0(p_str_22_q0)
);

SHA256_hexToBin_p_str_21 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
p_str_21_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str_21_address0),
    .ce0(p_str_21_ce0),
    .q0(p_str_21_q0)
);

SHA256_hexToBin_p_str_20 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
p_str_20_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str_20_address0),
    .ce0(p_str_20_ce0),
    .q0(p_str_20_q0)
);

SHA256_hexToBin_p_str_19 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
p_str_19_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str_19_address0),
    .ce0(p_str_19_ce0),
    .q0(p_str_19_q0)
);

SHA256_hexToBin_p_str_18 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
p_str_18_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str_18_address0),
    .ce0(p_str_18_ce0),
    .q0(p_str_18_q0)
);

SHA256_hexToBin_p_str_17 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
p_str_17_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str_17_address0),
    .ce0(p_str_17_ce0),
    .q0(p_str_17_q0)
);

SHA256_hexToBin_p_str_16 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
p_str_16_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str_16_address0),
    .ce0(p_str_16_ce0),
    .q0(p_str_16_q0)
);

SHA256_hexToBin_p_str_15 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
p_str_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str_15_address0),
    .ce0(p_str_15_ce0),
    .q0(p_str_15_q0)
);

SHA256_hexToBin_p_str_14 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
p_str_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str_14_address0),
    .ce0(p_str_14_ce0),
    .q0(p_str_14_q0)
);

SHA256_hexToBin_p_str_13 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
p_str_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str_13_address0),
    .ce0(p_str_13_ce0),
    .q0(p_str_13_q0)
);

SHA256_hexToBin_p_str_12 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
p_str_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str_12_address0),
    .ce0(p_str_12_ce0),
    .q0(p_str_12_q0)
);

SHA256_hexToBin_p_str_11 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
p_str_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str_11_address0),
    .ce0(p_str_11_ce0),
    .q0(p_str_11_q0)
);

SHA256_hexToBin_p_str_10 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
p_str_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str_10_address0),
    .ce0(p_str_10_ce0),
    .q0(p_str_10_q0)
);

SHA256_hexToBin_p_str_9 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
p_str_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str_9_address0),
    .ce0(p_str_9_ce0),
    .q0(p_str_9_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_378)) begin
        if ((retval_0_i8_reg_480 == 5'd22)) begin
            empty_reg_603 <= zext_ln460_21_fu_719_p1;
        end else if ((retval_0_i8_reg_480 == 5'd21)) begin
            empty_reg_603 <= zext_ln460_20_fu_728_p1;
        end else if ((retval_0_i8_reg_480 == 5'd20)) begin
            empty_reg_603 <= zext_ln460_19_fu_737_p1;
        end else if ((retval_0_i8_reg_480 == 5'd19)) begin
            empty_reg_603 <= zext_ln460_18_fu_746_p1;
        end else if ((retval_0_i8_reg_480 == 5'd18)) begin
            empty_reg_603 <= zext_ln460_17_fu_755_p1;
        end else if ((retval_0_i8_reg_480 == 5'd17)) begin
            empty_reg_603 <= zext_ln460_16_fu_764_p1;
        end else if ((retval_0_i8_reg_480 == 5'd16)) begin
            empty_reg_603 <= zext_ln460_15_fu_773_p1;
        end else if ((retval_0_i8_reg_480 == 5'd15)) begin
            empty_reg_603 <= zext_ln460_14_fu_782_p1;
        end else if ((retval_0_i8_reg_480 == 5'd14)) begin
            empty_reg_603 <= zext_ln460_13_fu_791_p1;
        end else if ((retval_0_i8_reg_480 == 5'd13)) begin
            empty_reg_603 <= zext_ln460_12_fu_800_p1;
        end else if ((retval_0_i8_reg_480 == 5'd12)) begin
            empty_reg_603 <= zext_ln460_11_fu_809_p1;
        end else if ((retval_0_i8_reg_480 == 5'd11)) begin
            empty_reg_603 <= zext_ln460_10_fu_818_p1;
        end else if ((retval_0_i8_reg_480 == 5'd10)) begin
            empty_reg_603 <= zext_ln460_9_fu_827_p1;
        end else if ((retval_0_i8_reg_480 == 5'd9)) begin
            empty_reg_603 <= zext_ln460_8_fu_836_p1;
        end else if ((retval_0_i8_reg_480 == 5'd8)) begin
            empty_reg_603 <= zext_ln460_7_fu_845_p1;
        end else if ((retval_0_i8_reg_480 == 5'd7)) begin
            empty_reg_603 <= zext_ln460_6_fu_854_p1;
        end else if ((retval_0_i8_reg_480 == 5'd6)) begin
            empty_reg_603 <= zext_ln460_5_fu_863_p1;
        end else if ((retval_0_i8_reg_480 == 5'd5)) begin
            empty_reg_603 <= zext_ln460_4_fu_872_p1;
        end else if ((retval_0_i8_reg_480 == 5'd4)) begin
            empty_reg_603 <= zext_ln460_3_fu_881_p1;
        end else if ((retval_0_i8_reg_480 == 5'd3)) begin
            empty_reg_603 <= zext_ln460_2_fu_890_p1;
        end else if ((retval_0_i8_reg_480 == 5'd2)) begin
            empty_reg_603 <= zext_ln460_1_fu_899_p1;
        end else if ((retval_0_i8_reg_480 == 5'd1)) begin
            empty_reg_603 <= zext_ln460_fu_908_p1;
        end else if ((1'b1 == ap_condition_362)) begin
            empty_reg_603 <= trunc_ln460_fu_913_p1;
        end else if ((1'b1 == 1'b1)) begin
            empty_reg_603 <= ap_phi_reg_pp1_iter0_empty_reg_603;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln319_fu_687_p2 == 1'd1) & (icmp_ln318_fu_671_p2 == 1'd0))) begin
        i_1_reg_555 <= 64'd0;
    end else if (((icmp_ln449_fu_699_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_reg_555 <= add_ln450_fu_693_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_2_reg_656 <= trunc_ln457_fu_705_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln460_reg_1094 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_2_reg_656 <= add_ln462_fu_929_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_467 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_reg_467 <= add_ln322_reg_935;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_568 <= 64'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln460_reg_1094 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_reg_568 <= add_ln463_reg_1089;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_557)) begin
        if ((string_r_q0 == 8'd48)) begin
            retval_0_i8_reg_480 <= 5'd22;
        end else if ((string_r_q0 == 8'd49)) begin
            retval_0_i8_reg_480 <= 5'd21;
        end else if ((string_r_q0 == 8'd50)) begin
            retval_0_i8_reg_480 <= 5'd20;
        end else if ((string_r_q0 == 8'd51)) begin
            retval_0_i8_reg_480 <= 5'd19;
        end else if ((string_r_q0 == 8'd52)) begin
            retval_0_i8_reg_480 <= 5'd18;
        end else if ((string_r_q0 == 8'd53)) begin
            retval_0_i8_reg_480 <= 5'd17;
        end else if ((string_r_q0 == 8'd54)) begin
            retval_0_i8_reg_480 <= 5'd16;
        end else if ((string_r_q0 == 8'd55)) begin
            retval_0_i8_reg_480 <= 5'd15;
        end else if ((string_r_q0 == 8'd56)) begin
            retval_0_i8_reg_480 <= 5'd14;
        end else if ((string_r_q0 == 8'd57)) begin
            retval_0_i8_reg_480 <= 5'd13;
        end else if ((string_r_q0 == 8'd65)) begin
            retval_0_i8_reg_480 <= 5'd12;
        end else if ((string_r_q0 == 8'd66)) begin
            retval_0_i8_reg_480 <= 5'd11;
        end else if ((string_r_q0 == 8'd67)) begin
            retval_0_i8_reg_480 <= 5'd10;
        end else if ((string_r_q0 == 8'd68)) begin
            retval_0_i8_reg_480 <= 5'd9;
        end else if ((string_r_q0 == 8'd69)) begin
            retval_0_i8_reg_480 <= 5'd8;
        end else if ((string_r_q0 == 8'd70)) begin
            retval_0_i8_reg_480 <= 5'd7;
        end else if ((string_r_q0 == 8'd97)) begin
            retval_0_i8_reg_480 <= 5'd6;
        end else if ((string_r_q0 == 8'd98)) begin
            retval_0_i8_reg_480 <= 5'd5;
        end else if ((string_r_q0 == 8'd99)) begin
            retval_0_i8_reg_480 <= 5'd4;
        end else if ((string_r_q0 == 8'd100)) begin
            retval_0_i8_reg_480 <= 5'd3;
        end else if ((string_r_q0 == 8'd101)) begin
            retval_0_i8_reg_480 <= 5'd2;
        end else if ((string_r_q0 == 8'd102)) begin
            retval_0_i8_reg_480 <= 5'd1;
        end else if ((1'b1 == ap_condition_875)) begin
            retval_0_i8_reg_480 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln322_reg_935 <= add_ln322_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        add_ln463_reg_1089 <= add_ln463_fu_709_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        icmp_ln460_reg_1094 <= icmp_ln460_fu_918_p2;
    end
end

always @ (*) begin
    if (((icmp_ln460_fu_918_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln318_fu_671_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((retval_0_i8_reg_480 == 5'd22)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_21_fu_719_p1;
    end else if ((retval_0_i8_reg_480 == 5'd21)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_20_fu_728_p1;
    end else if ((retval_0_i8_reg_480 == 5'd20)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_19_fu_737_p1;
    end else if ((retval_0_i8_reg_480 == 5'd19)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_18_fu_746_p1;
    end else if ((retval_0_i8_reg_480 == 5'd18)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_17_fu_755_p1;
    end else if ((retval_0_i8_reg_480 == 5'd17)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_16_fu_764_p1;
    end else if ((retval_0_i8_reg_480 == 5'd16)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_15_fu_773_p1;
    end else if ((retval_0_i8_reg_480 == 5'd15)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_14_fu_782_p1;
    end else if ((retval_0_i8_reg_480 == 5'd14)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_13_fu_791_p1;
    end else if ((retval_0_i8_reg_480 == 5'd13)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_12_fu_800_p1;
    end else if ((retval_0_i8_reg_480 == 5'd12)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_11_fu_809_p1;
    end else if ((retval_0_i8_reg_480 == 5'd11)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_10_fu_818_p1;
    end else if ((retval_0_i8_reg_480 == 5'd10)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_9_fu_827_p1;
    end else if ((retval_0_i8_reg_480 == 5'd9)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_8_fu_836_p1;
    end else if ((retval_0_i8_reg_480 == 5'd8)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_7_fu_845_p1;
    end else if ((retval_0_i8_reg_480 == 5'd7)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_6_fu_854_p1;
    end else if ((retval_0_i8_reg_480 == 5'd6)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_5_fu_863_p1;
    end else if ((retval_0_i8_reg_480 == 5'd5)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_4_fu_872_p1;
    end else if ((retval_0_i8_reg_480 == 5'd4)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_3_fu_881_p1;
    end else if ((retval_0_i8_reg_480 == 5'd3)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_2_fu_890_p1;
    end else if ((retval_0_i8_reg_480 == 5'd2)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_1_fu_899_p1;
    end else if ((retval_0_i8_reg_480 == 5'd1)) begin
        ap_phi_mux_empty_phi_fu_607_p46 = zext_ln460_fu_908_p1;
    end else if (((retval_0_i8_reg_480 == 5'd0) | ((retval_0_i8_reg_480 == 5'd23) | ((retval_0_i8_reg_480 == 5'd24) | ((retval_0_i8_reg_480 == 5'd25) | ((retval_0_i8_reg_480 == 5'd26) | ((retval_0_i8_reg_480 == 5'd27) | ((retval_0_i8_reg_480 == 5'd28) | ((retval_0_i8_reg_480 == 5'd29) | ((retval_0_i8_reg_480 == 5'd30) | (retval_0_i8_reg_480 == 5'd31))))))))))) begin
        ap_phi_mux_empty_phi_fu_607_p46 = trunc_ln460_fu_913_p1;
    end else begin
        ap_phi_mux_empty_phi_fu_607_p46 = ap_phi_reg_pp1_iter0_empty_reg_603;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln460_reg_1094 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_j_phi_fu_572_p4 = add_ln463_reg_1089;
    end else begin
        ap_phi_mux_j_phi_fu_572_p4 = j_reg_568;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln318_fu_671_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        bits_address0 = i_2_cast1_fu_924_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        bits_address0 = i_1_reg_555;
    end else begin
        bits_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        bits_ce0 = 1'b1;
    end else begin
        bits_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln460_reg_1094 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        bits_we0 = 1'b1;
    end else begin
        bits_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_str_10_ce0 = 1'b1;
    end else begin
        p_str_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_str_11_ce0 = 1'b1;
    end else begin
        p_str_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_str_12_ce0 = 1'b1;
    end else begin
        p_str_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_str_13_ce0 = 1'b1;
    end else begin
        p_str_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_str_14_ce0 = 1'b1;
    end else begin
        p_str_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_str_15_ce0 = 1'b1;
    end else begin
        p_str_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_str_16_ce0 = 1'b1;
    end else begin
        p_str_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_str_17_ce0 = 1'b1;
    end else begin
        p_str_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_str_18_ce0 = 1'b1;
    end else begin
        p_str_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_614)) begin
        if ((retval_0_i8_reg_480 == 5'd6)) begin
            p_str_19_address0 = p_str_19_addr_gep_fu_398_p3;
        end else if ((retval_0_i8_reg_480 == 5'd12)) begin
            p_str_19_address0 = ap_phi_mux_j_phi_fu_572_p4;
        end else begin
            p_str_19_address0 = 'bx;
        end
    end else begin
        p_str_19_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (retval_0_i8_reg_480 == 5'd6) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (retval_0_i8_reg_480 == 5'd12) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        p_str_19_ce0 = 1'b1;
    end else begin
        p_str_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_614)) begin
        if ((retval_0_i8_reg_480 == 5'd5)) begin
            p_str_20_address0 = p_str_20_addr_gep_fu_406_p3;
        end else if ((retval_0_i8_reg_480 == 5'd11)) begin
            p_str_20_address0 = ap_phi_mux_j_phi_fu_572_p4;
        end else begin
            p_str_20_address0 = 'bx;
        end
    end else begin
        p_str_20_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (retval_0_i8_reg_480 == 5'd5) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (retval_0_i8_reg_480 == 5'd11) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        p_str_20_ce0 = 1'b1;
    end else begin
        p_str_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_614)) begin
        if ((retval_0_i8_reg_480 == 5'd4)) begin
            p_str_21_address0 = p_str_21_addr_gep_fu_414_p3;
        end else if ((retval_0_i8_reg_480 == 5'd10)) begin
            p_str_21_address0 = ap_phi_mux_j_phi_fu_572_p4;
        end else begin
            p_str_21_address0 = 'bx;
        end
    end else begin
        p_str_21_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (retval_0_i8_reg_480 == 5'd4) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (retval_0_i8_reg_480 == 5'd10) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        p_str_21_ce0 = 1'b1;
    end else begin
        p_str_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_614)) begin
        if ((retval_0_i8_reg_480 == 5'd3)) begin
            p_str_22_address0 = p_str_22_addr_gep_fu_422_p3;
        end else if ((retval_0_i8_reg_480 == 5'd9)) begin
            p_str_22_address0 = ap_phi_mux_j_phi_fu_572_p4;
        end else begin
            p_str_22_address0 = 'bx;
        end
    end else begin
        p_str_22_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (retval_0_i8_reg_480 == 5'd3) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (retval_0_i8_reg_480 == 5'd9) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        p_str_22_ce0 = 1'b1;
    end else begin
        p_str_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_614)) begin
        if ((retval_0_i8_reg_480 == 5'd2)) begin
            p_str_23_address0 = p_str_23_addr_gep_fu_430_p3;
        end else if ((retval_0_i8_reg_480 == 5'd8)) begin
            p_str_23_address0 = ap_phi_mux_j_phi_fu_572_p4;
        end else begin
            p_str_23_address0 = 'bx;
        end
    end else begin
        p_str_23_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (retval_0_i8_reg_480 == 5'd2) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (retval_0_i8_reg_480 == 5'd8) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        p_str_23_ce0 = 1'b1;
    end else begin
        p_str_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_614)) begin
        if ((retval_0_i8_reg_480 == 5'd1)) begin
            p_str_24_address0 = p_str_24_addr_gep_fu_438_p3;
        end else if ((retval_0_i8_reg_480 == 5'd7)) begin
            p_str_24_address0 = ap_phi_mux_j_phi_fu_572_p4;
        end else begin
            p_str_24_address0 = 'bx;
        end
    end else begin
        p_str_24_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (retval_0_i8_reg_480 == 5'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (retval_0_i8_reg_480 == 5'd7) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        p_str_24_ce0 = 1'b1;
    end else begin
        p_str_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_str_25_ce0 = 1'b1;
    end else begin
        p_str_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_str_9_ce0 = 1'b1;
    end else begin
        p_str_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        string_r_ce0 = 1'b1;
    end else begin
        string_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln318_fu_671_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln319_fu_687_p2 == 1'd1) & (icmp_ln318_fu_671_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln449_fu_699_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln322_fu_665_p2 = (i_reg_467 + 64'd1);

assign add_ln450_fu_693_p2 = (i_1_reg_555 + 64'd1);

assign add_ln462_fu_929_p2 = (i_2_reg_656 + 4'd1);

assign add_ln463_fu_709_p2 = (j_reg_568 + 64'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_362 = ((retval_0_i8_reg_480 == 5'd0) | ((retval_0_i8_reg_480 == 5'd23) | ((retval_0_i8_reg_480 == 5'd24) | ((retval_0_i8_reg_480 == 5'd25) | ((retval_0_i8_reg_480 == 5'd26) | ((retval_0_i8_reg_480 == 5'd27) | ((retval_0_i8_reg_480 == 5'd28) | ((retval_0_i8_reg_480 == 5'd29) | ((retval_0_i8_reg_480 == 5'd30) | (retval_0_i8_reg_480 == 5'd31))))))))));
end

always @ (*) begin
    ap_condition_378 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1));
end

always @ (*) begin
    ap_condition_557 = ((1'b1 == ap_CS_fsm_state3) & (icmp_ln319_fu_687_p2 == 1'd1) & (icmp_ln318_fu_671_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_614 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

always @ (*) begin
    ap_condition_875 = (~(string_r_q0 == 8'd102) & ~(string_r_q0 == 8'd101) & ~(string_r_q0 == 8'd100) & ~(string_r_q0 == 8'd99) & ~(string_r_q0 == 8'd98) & ~(string_r_q0 == 8'd97) & ~(string_r_q0 == 8'd70) & ~(string_r_q0 == 8'd69) & ~(string_r_q0 == 8'd68) & ~(string_r_q0 == 8'd67) & ~(string_r_q0 == 8'd66) & ~(string_r_q0 == 8'd65) & ~(string_r_q0 == 8'd57) & ~(string_r_q0 == 8'd56) & ~(string_r_q0 == 8'd55) & ~(string_r_q0 == 8'd54) & ~(string_r_q0 == 8'd53) & ~(string_r_q0 == 8'd52) & ~(string_r_q0 == 8'd51) & ~(string_r_q0 == 8'd50) & ~(string_r_q0 == 8'd49) & ~(string_r_q0 == 8'd48));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_reg_pp1_iter0_empty_reg_603 = 'bx;

assign bits_d0 = empty_reg_603;

assign i_2_cast1_fu_924_p1 = i_2_reg_656;

assign icmp_ln318_fu_671_p2 = ((string_r_q0 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln319_fu_687_p2 = (($signed(tmp_fu_677_p4) > $signed(63'd0)) ? 1'b1 : 1'b0);

assign icmp_ln449_fu_699_p2 = ((bits_q0 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln460_fu_918_p2 = ((ap_phi_mux_empty_phi_fu_607_p46 == 7'd0) ? 1'b1 : 1'b0);

assign p_str_10_address0 = ap_phi_mux_j_phi_fu_572_p4;

assign p_str_11_address0 = ap_phi_mux_j_phi_fu_572_p4;

assign p_str_12_address0 = ap_phi_mux_j_phi_fu_572_p4;

assign p_str_13_address0 = ap_phi_mux_j_phi_fu_572_p4;

assign p_str_14_address0 = ap_phi_mux_j_phi_fu_572_p4;

assign p_str_15_address0 = ap_phi_mux_j_phi_fu_572_p4;

assign p_str_16_address0 = ap_phi_mux_j_phi_fu_572_p4;

assign p_str_17_address0 = ap_phi_mux_j_phi_fu_572_p4;

assign p_str_18_address0 = ap_phi_mux_j_phi_fu_572_p4;

assign p_str_19_addr_gep_fu_398_p3 = ap_phi_mux_j_phi_fu_572_p4;

assign p_str_20_addr_gep_fu_406_p3 = ap_phi_mux_j_phi_fu_572_p4;

assign p_str_21_addr_gep_fu_414_p3 = ap_phi_mux_j_phi_fu_572_p4;

assign p_str_22_addr_gep_fu_422_p3 = ap_phi_mux_j_phi_fu_572_p4;

assign p_str_23_addr_gep_fu_430_p3 = ap_phi_mux_j_phi_fu_572_p4;

assign p_str_24_addr_gep_fu_438_p3 = ap_phi_mux_j_phi_fu_572_p4;

assign p_str_25_address0 = ap_phi_mux_j_phi_fu_572_p4;

assign p_str_9_address0 = ap_phi_mux_j_phi_fu_572_p4;

assign string_r_address0 = i_reg_467;

assign tmp_fu_677_p4 = {{i_reg_467[63:1]}};

assign trunc_ln457_fu_705_p1 = i_1_reg_555[3:0];

assign trunc_ln460_10_fu_823_p1 = p_str_21_q0[5:0];

assign trunc_ln460_11_fu_814_p1 = p_str_20_q0[5:0];

assign trunc_ln460_12_fu_805_p1 = p_str_19_q0[5:0];

assign trunc_ln460_13_fu_796_p1 = p_str_18_q0[5:0];

assign trunc_ln460_14_fu_787_p1 = p_str_17_q0[5:0];

assign trunc_ln460_15_fu_778_p1 = p_str_16_q0[5:0];

assign trunc_ln460_16_fu_769_p1 = p_str_15_q0[5:0];

assign trunc_ln460_17_fu_760_p1 = p_str_14_q0[5:0];

assign trunc_ln460_18_fu_751_p1 = p_str_13_q0[5:0];

assign trunc_ln460_19_fu_742_p1 = p_str_12_q0[5:0];

assign trunc_ln460_1_fu_904_p1 = p_str_24_q0[5:0];

assign trunc_ln460_20_fu_733_p1 = p_str_11_q0[5:0];

assign trunc_ln460_21_fu_724_p1 = p_str_10_q0[5:0];

assign trunc_ln460_22_fu_715_p1 = p_str_9_q0[5:0];

assign trunc_ln460_2_fu_895_p1 = p_str_23_q0[5:0];

assign trunc_ln460_3_fu_886_p1 = p_str_22_q0[5:0];

assign trunc_ln460_4_fu_877_p1 = p_str_21_q0[5:0];

assign trunc_ln460_5_fu_868_p1 = p_str_20_q0[5:0];

assign trunc_ln460_6_fu_859_p1 = p_str_19_q0[5:0];

assign trunc_ln460_7_fu_850_p1 = p_str_24_q0[5:0];

assign trunc_ln460_8_fu_841_p1 = p_str_23_q0[5:0];

assign trunc_ln460_9_fu_832_p1 = p_str_22_q0[5:0];

assign trunc_ln460_fu_913_p1 = p_str_25_q0[6:0];

assign zext_ln460_10_fu_818_p1 = trunc_ln460_11_fu_814_p1;

assign zext_ln460_11_fu_809_p1 = trunc_ln460_12_fu_805_p1;

assign zext_ln460_12_fu_800_p1 = trunc_ln460_13_fu_796_p1;

assign zext_ln460_13_fu_791_p1 = trunc_ln460_14_fu_787_p1;

assign zext_ln460_14_fu_782_p1 = trunc_ln460_15_fu_778_p1;

assign zext_ln460_15_fu_773_p1 = trunc_ln460_16_fu_769_p1;

assign zext_ln460_16_fu_764_p1 = trunc_ln460_17_fu_760_p1;

assign zext_ln460_17_fu_755_p1 = trunc_ln460_18_fu_751_p1;

assign zext_ln460_18_fu_746_p1 = trunc_ln460_19_fu_742_p1;

assign zext_ln460_19_fu_737_p1 = trunc_ln460_20_fu_733_p1;

assign zext_ln460_1_fu_899_p1 = trunc_ln460_2_fu_895_p1;

assign zext_ln460_20_fu_728_p1 = trunc_ln460_21_fu_724_p1;

assign zext_ln460_21_fu_719_p1 = trunc_ln460_22_fu_715_p1;

assign zext_ln460_2_fu_890_p1 = trunc_ln460_3_fu_886_p1;

assign zext_ln460_3_fu_881_p1 = trunc_ln460_4_fu_877_p1;

assign zext_ln460_4_fu_872_p1 = trunc_ln460_5_fu_868_p1;

assign zext_ln460_5_fu_863_p1 = trunc_ln460_6_fu_859_p1;

assign zext_ln460_6_fu_854_p1 = trunc_ln460_7_fu_850_p1;

assign zext_ln460_7_fu_845_p1 = trunc_ln460_8_fu_841_p1;

assign zext_ln460_8_fu_836_p1 = trunc_ln460_9_fu_832_p1;

assign zext_ln460_9_fu_827_p1 = trunc_ln460_10_fu_823_p1;

assign zext_ln460_fu_908_p1 = trunc_ln460_1_fu_904_p1;

endmodule //SHA256_hexToBin
