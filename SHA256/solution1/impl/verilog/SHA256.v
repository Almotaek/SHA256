// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="SHA256_SHA256,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.647917,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4396,HLS_SYN_LUT=8147,HLS_VERSION=2020_2}" *)

module SHA256 (
        ap_clk,
        ap_rst_n,
        s_axi_CRTLS_AWVALID,
        s_axi_CRTLS_AWREADY,
        s_axi_CRTLS_AWADDR,
        s_axi_CRTLS_WVALID,
        s_axi_CRTLS_WREADY,
        s_axi_CRTLS_WDATA,
        s_axi_CRTLS_WSTRB,
        s_axi_CRTLS_ARVALID,
        s_axi_CRTLS_ARREADY,
        s_axi_CRTLS_ARADDR,
        s_axi_CRTLS_RVALID,
        s_axi_CRTLS_RREADY,
        s_axi_CRTLS_RDATA,
        s_axi_CRTLS_RRESP,
        s_axi_CRTLS_BVALID,
        s_axi_CRTLS_BREADY,
        s_axi_CRTLS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_pp0_stage0 = 25'd2;
parameter    ap_ST_fsm_state4 = 25'd4;
parameter    ap_ST_fsm_state5 = 25'd8;
parameter    ap_ST_fsm_state6 = 25'd16;
parameter    ap_ST_fsm_state7 = 25'd32;
parameter    ap_ST_fsm_state8 = 25'd64;
parameter    ap_ST_fsm_state9 = 25'd128;
parameter    ap_ST_fsm_state10 = 25'd256;
parameter    ap_ST_fsm_state11 = 25'd512;
parameter    ap_ST_fsm_state12 = 25'd1024;
parameter    ap_ST_fsm_state13 = 25'd2048;
parameter    ap_ST_fsm_state14 = 25'd4096;
parameter    ap_ST_fsm_state15 = 25'd8192;
parameter    ap_ST_fsm_state16 = 25'd16384;
parameter    ap_ST_fsm_state17 = 25'd32768;
parameter    ap_ST_fsm_state18 = 25'd65536;
parameter    ap_ST_fsm_state19 = 25'd131072;
parameter    ap_ST_fsm_state20 = 25'd262144;
parameter    ap_ST_fsm_state21 = 25'd524288;
parameter    ap_ST_fsm_state22 = 25'd1048576;
parameter    ap_ST_fsm_state23 = 25'd2097152;
parameter    ap_ST_fsm_pp9_stage0 = 25'd4194304;
parameter    ap_ST_fsm_pp9_stage1 = 25'd8388608;
parameter    ap_ST_fsm_state27 = 25'd16777216;
parameter    C_S_AXI_CRTLS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTLS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTLS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_CRTLS_AWVALID;
output   s_axi_CRTLS_AWREADY;
input  [C_S_AXI_CRTLS_ADDR_WIDTH - 1:0] s_axi_CRTLS_AWADDR;
input   s_axi_CRTLS_WVALID;
output   s_axi_CRTLS_WREADY;
input  [C_S_AXI_CRTLS_DATA_WIDTH - 1:0] s_axi_CRTLS_WDATA;
input  [C_S_AXI_CRTLS_WSTRB_WIDTH - 1:0] s_axi_CRTLS_WSTRB;
input   s_axi_CRTLS_ARVALID;
output   s_axi_CRTLS_ARREADY;
input  [C_S_AXI_CRTLS_ADDR_WIDTH - 1:0] s_axi_CRTLS_ARADDR;
output   s_axi_CRTLS_RVALID;
input   s_axi_CRTLS_RREADY;
output  [C_S_AXI_CRTLS_DATA_WIDTH - 1:0] s_axi_CRTLS_RDATA;
output  [1:0] s_axi_CRTLS_RRESP;
output   s_axi_CRTLS_BVALID;
input   s_axi_CRTLS_BREADY;
output  [1:0] s_axi_CRTLS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [7:0] input_r;
reg   [7:0] hash;
reg    hash_ap_vld;
wire   [5:0] p_str_8_address0;
reg    p_str_8_ce0;
wire   [7:0] p_str_8_q0;
reg    p_str_ce0;
wire   [7:0] p_str_q0;
reg    p_str_1_ce0;
wire   [7:0] p_str_1_q0;
wire   [7:0] p_str_2_q0;
wire   [7:0] p_str_3_q0;
reg   [3:0] p_str_4_address0;
reg    p_str_4_ce0;
wire   [7:0] p_str_4_q0;
wire   [7:0] p_str_5_q0;
wire   [7:0] p_str_6_q0;
wire   [7:0] p_str_7_q0;
reg   [5:0] i_reg_300;
reg   [63:0] i_3_reg_399;
wire   [5:0] add_ln474_fu_740_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln472_fu_746_p2;
reg   [0:0] icmp_ln472_reg_914;
wire   [3:0] empty_17_fu_757_p2;
wire    ap_CS_fsm_state5;
wire   [3:0] empty_20_fu_774_p2;
wire    ap_CS_fsm_state7;
wire   [3:0] empty_23_fu_791_p2;
wire    ap_CS_fsm_state9;
wire   [3:0] empty_26_fu_808_p2;
wire    ap_CS_fsm_state11;
wire   [3:0] empty_29_fu_825_p2;
wire    ap_CS_fsm_state13;
wire   [3:0] empty_32_fu_842_p2;
wire    ap_CS_fsm_state15;
wire   [3:0] empty_35_fu_859_p2;
wire    ap_CS_fsm_state17;
wire   [3:0] empty_38_fu_876_p2;
wire    ap_CS_fsm_state19;
wire   [63:0] add_ln474_1_fu_893_p2;
reg   [63:0] add_ln474_1_reg_987;
wire    ap_CS_fsm_pp9_stage0;
reg    ap_enable_reg_pp9_iter0;
wire    ap_block_state24_pp9_stage0_iter0;
wire    ap_block_state26_pp9_stage0_iter1;
wire    ap_block_pp9_stage0_11001;
wire   [6:0] h0_q0;
reg   [6:0] h0_load_reg_997;
wire    ap_CS_fsm_pp9_stage1;
wire    ap_block_state25_pp9_stage1_iter0;
wire    ap_block_pp9_stage1_11001;
wire   [0:0] icmp_ln472_1_fu_899_p2;
reg   [0:0] icmp_ln472_1_reg_1002;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state23;
wire    grp_hexToBin_fu_411_ap_ready;
wire    grp_hexToBin_fu_411_ap_done;
wire    grp_hexToBin_fu_453_ap_ready;
wire    grp_hexToBin_fu_453_ap_done;
wire    grp_hexToBin_fu_494_ap_ready;
wire    grp_hexToBin_fu_494_ap_done;
wire    grp_hexToBin_fu_535_ap_ready;
wire    grp_hexToBin_fu_535_ap_done;
wire    grp_hexToBin_fu_576_ap_ready;
wire    grp_hexToBin_fu_576_ap_done;
wire    grp_hexToBin_fu_617_ap_ready;
wire    grp_hexToBin_fu_617_ap_done;
wire    grp_hexToBin_fu_658_ap_ready;
wire    grp_hexToBin_fu_658_ap_done;
wire    grp_hexToBin_fu_699_ap_ready;
wire    grp_hexToBin_fu_699_ap_done;
reg    ap_block_state23_on_subcall_done;
wire    ap_block_pp9_stage1_subdone;
reg    ap_condition_pp9_exit_iter0_state25;
reg    ap_enable_reg_pp9_iter1;
reg   [3:0] h0_address0;
reg    h0_ce0;
reg    h0_we0;
reg   [6:0] h0_d0;
reg   [3:0] h1_address0;
reg    h1_ce0;
reg    h1_we0;
reg   [6:0] h1_d0;
wire   [6:0] h1_q0;
reg   [3:0] h2_address0;
reg    h2_ce0;
reg    h2_we0;
reg   [6:0] h2_d0;
wire   [6:0] h2_q0;
reg   [3:0] h3_address0;
reg    h3_ce0;
reg    h3_we0;
reg   [6:0] h3_d0;
wire   [6:0] h3_q0;
reg   [3:0] h4_address0;
reg    h4_ce0;
reg    h4_we0;
reg   [6:0] h4_d0;
wire   [6:0] h4_q0;
reg   [3:0] h5_address0;
reg    h5_ce0;
reg    h5_we0;
reg   [6:0] h5_d0;
wire   [6:0] h5_q0;
reg   [3:0] h6_address0;
reg    h6_ce0;
reg    h6_we0;
reg   [6:0] h6_d0;
wire   [6:0] h6_q0;
reg   [3:0] h7_address0;
reg    h7_ce0;
reg    h7_we0;
reg   [6:0] h7_d0;
wire   [6:0] h7_q0;
wire    grp_hexToBin_fu_411_ap_start;
wire    grp_hexToBin_fu_411_ap_idle;
wire   [3:0] grp_hexToBin_fu_411_string_r_address0;
wire    grp_hexToBin_fu_411_string_r_ce0;
reg   [7:0] grp_hexToBin_fu_411_string_r_q0;
wire   [3:0] grp_hexToBin_fu_411_bits_address0;
wire    grp_hexToBin_fu_411_bits_ce0;
wire    grp_hexToBin_fu_411_bits_we0;
wire   [6:0] grp_hexToBin_fu_411_bits_d0;
reg   [6:0] grp_hexToBin_fu_411_bits_q0;
wire    grp_hexToBin_fu_453_ap_start;
wire    grp_hexToBin_fu_453_ap_idle;
wire   [3:0] grp_hexToBin_fu_453_string_r_address0;
wire    grp_hexToBin_fu_453_string_r_ce0;
wire   [3:0] grp_hexToBin_fu_453_bits_address0;
wire    grp_hexToBin_fu_453_bits_ce0;
wire    grp_hexToBin_fu_453_bits_we0;
wire   [6:0] grp_hexToBin_fu_453_bits_d0;
wire    grp_hexToBin_fu_494_ap_start;
wire    grp_hexToBin_fu_494_ap_idle;
wire   [3:0] grp_hexToBin_fu_494_string_r_address0;
wire    grp_hexToBin_fu_494_string_r_ce0;
wire   [3:0] grp_hexToBin_fu_494_bits_address0;
wire    grp_hexToBin_fu_494_bits_ce0;
wire    grp_hexToBin_fu_494_bits_we0;
wire   [6:0] grp_hexToBin_fu_494_bits_d0;
wire    grp_hexToBin_fu_535_ap_start;
wire    grp_hexToBin_fu_535_ap_idle;
wire   [3:0] grp_hexToBin_fu_535_string_r_address0;
wire    grp_hexToBin_fu_535_string_r_ce0;
wire   [3:0] grp_hexToBin_fu_535_bits_address0;
wire    grp_hexToBin_fu_535_bits_ce0;
wire    grp_hexToBin_fu_535_bits_we0;
wire   [6:0] grp_hexToBin_fu_535_bits_d0;
wire    grp_hexToBin_fu_576_ap_start;
wire    grp_hexToBin_fu_576_ap_idle;
wire   [3:0] grp_hexToBin_fu_576_string_r_address0;
wire    grp_hexToBin_fu_576_string_r_ce0;
wire   [3:0] grp_hexToBin_fu_576_bits_address0;
wire    grp_hexToBin_fu_576_bits_ce0;
wire    grp_hexToBin_fu_576_bits_we0;
wire   [6:0] grp_hexToBin_fu_576_bits_d0;
wire    grp_hexToBin_fu_617_ap_start;
wire    grp_hexToBin_fu_617_ap_idle;
wire   [3:0] grp_hexToBin_fu_617_string_r_address0;
wire    grp_hexToBin_fu_617_string_r_ce0;
wire   [3:0] grp_hexToBin_fu_617_bits_address0;
wire    grp_hexToBin_fu_617_bits_ce0;
wire    grp_hexToBin_fu_617_bits_we0;
wire   [6:0] grp_hexToBin_fu_617_bits_d0;
wire    grp_hexToBin_fu_658_ap_start;
wire    grp_hexToBin_fu_658_ap_idle;
wire   [3:0] grp_hexToBin_fu_658_string_r_address0;
wire    grp_hexToBin_fu_658_string_r_ce0;
wire   [3:0] grp_hexToBin_fu_658_bits_address0;
wire    grp_hexToBin_fu_658_bits_ce0;
wire    grp_hexToBin_fu_658_bits_we0;
wire   [6:0] grp_hexToBin_fu_658_bits_d0;
wire    grp_hexToBin_fu_699_ap_start;
wire    grp_hexToBin_fu_699_ap_idle;
wire   [3:0] grp_hexToBin_fu_699_string_r_address0;
wire    grp_hexToBin_fu_699_string_r_ce0;
wire   [3:0] grp_hexToBin_fu_699_bits_address0;
wire    grp_hexToBin_fu_699_bits_ce0;
wire    grp_hexToBin_fu_699_bits_we0;
wire   [6:0] grp_hexToBin_fu_699_bits_d0;
reg   [3:0] empty_16_reg_311;
wire   [0:0] exitcond238_fu_763_p2;
wire    ap_CS_fsm_state4;
reg   [3:0] empty_19_reg_322;
wire   [0:0] exitcond227_fu_780_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] empty_22_reg_333;
wire   [0:0] exitcond216_fu_797_p2;
wire    ap_CS_fsm_state8;
reg   [3:0] empty_25_reg_344;
wire   [0:0] exitcond205_fu_814_p2;
wire    ap_CS_fsm_state10;
reg   [3:0] empty_28_reg_355;
wire   [0:0] exitcond194_fu_831_p2;
wire    ap_CS_fsm_state12;
reg   [3:0] empty_31_reg_366;
wire   [0:0] exitcond183_fu_848_p2;
wire    ap_CS_fsm_state14;
reg   [3:0] empty_34_reg_377;
wire   [0:0] exitcond172_fu_865_p2;
wire    ap_CS_fsm_state16;
reg   [3:0] empty_37_reg_388;
wire   [0:0] exitcond1_fu_882_p2;
wire    ap_CS_fsm_state18;
reg   [63:0] ap_phi_mux_i_3_phi_fu_403_p4;
wire    ap_block_pp9_stage0;
reg    grp_hexToBin_fu_411_ap_start_reg;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state21;
reg    grp_hexToBin_fu_453_ap_start_reg;
reg    grp_hexToBin_fu_494_ap_start_reg;
reg    grp_hexToBin_fu_535_ap_start_reg;
reg    grp_hexToBin_fu_576_ap_start_reg;
reg    grp_hexToBin_fu_617_ap_start_reg;
reg    grp_hexToBin_fu_658_ap_start_reg;
reg    grp_hexToBin_fu_699_ap_start_reg;
wire   [63:0] i_cast_fu_752_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] p_cast_fu_769_p1;
wire   [63:0] p_cast1_fu_786_p1;
wire   [63:0] p_cast2_fu_803_p1;
wire   [63:0] p_cast3_fu_820_p1;
wire   [63:0] p_cast4_fu_837_p1;
wire   [63:0] p_cast5_fu_854_p1;
wire   [63:0] p_cast6_fu_871_p1;
wire   [63:0] p_cast7_fu_888_p1;
wire    ap_block_pp0_stage0_01001;
wire   [7:0] zext_ln472_fu_905_p1;
wire    ap_block_pp9_stage0_01001;
wire    ap_block_pp9_stage1;
wire    ap_CS_fsm_state27;
reg   [24:0] ap_NS_fsm;
wire    ap_block_pp9_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp9;
wire    ap_enable_pp9;
wire    ap_ce_reg;
wire   [63:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp9_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp9_iter1 = 1'b0;
#0 grp_hexToBin_fu_411_ap_start_reg = 1'b0;
#0 grp_hexToBin_fu_453_ap_start_reg = 1'b0;
#0 grp_hexToBin_fu_494_ap_start_reg = 1'b0;
#0 grp_hexToBin_fu_535_ap_start_reg = 1'b0;
#0 grp_hexToBin_fu_576_ap_start_reg = 1'b0;
#0 grp_hexToBin_fu_617_ap_start_reg = 1'b0;
#0 grp_hexToBin_fu_658_ap_start_reg = 1'b0;
#0 grp_hexToBin_fu_699_ap_start_reg = 1'b0;
end

SHA256_p_str_8 #(
    .DataWidth( 8 ),
    .AddressRange( 35 ),
    .AddressWidth( 6 ))
p_str_8_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(p_str_8_address0),
    .ce0(p_str_8_ce0),
    .q0(p_str_8_q0)
);

SHA256_p_str #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
p_str_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_hexToBin_fu_411_string_r_address0),
    .ce0(p_str_ce0),
    .q0(p_str_q0)
);

SHA256_p_str_1 #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
p_str_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_hexToBin_fu_411_string_r_address0),
    .ce0(p_str_1_ce0),
    .q0(p_str_1_q0)
);

SHA256_p_str_2 #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
p_str_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_hexToBin_fu_453_string_r_address0),
    .ce0(grp_hexToBin_fu_453_string_r_ce0),
    .q0(p_str_2_q0)
);

SHA256_p_str_3 #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
p_str_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_hexToBin_fu_494_string_r_address0),
    .ce0(grp_hexToBin_fu_494_string_r_ce0),
    .q0(p_str_3_q0)
);

SHA256_p_str_4 #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
p_str_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(p_str_4_address0),
    .ce0(p_str_4_ce0),
    .q0(p_str_4_q0)
);

SHA256_p_str_5 #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
p_str_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_hexToBin_fu_617_string_r_address0),
    .ce0(grp_hexToBin_fu_617_string_r_ce0),
    .q0(p_str_5_q0)
);

SHA256_p_str_6 #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
p_str_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_hexToBin_fu_658_string_r_address0),
    .ce0(grp_hexToBin_fu_658_string_r_ce0),
    .q0(p_str_6_q0)
);

SHA256_p_str_7 #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
p_str_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_hexToBin_fu_699_string_r_address0),
    .ce0(grp_hexToBin_fu_699_string_r_ce0),
    .q0(p_str_7_q0)
);

SHA256_CRTLS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTLS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTLS_DATA_WIDTH ))
CRTLS_s_axi_U(
    .AWVALID(s_axi_CRTLS_AWVALID),
    .AWREADY(s_axi_CRTLS_AWREADY),
    .AWADDR(s_axi_CRTLS_AWADDR),
    .WVALID(s_axi_CRTLS_WVALID),
    .WREADY(s_axi_CRTLS_WREADY),
    .WDATA(s_axi_CRTLS_WDATA),
    .WSTRB(s_axi_CRTLS_WSTRB),
    .ARVALID(s_axi_CRTLS_ARVALID),
    .ARREADY(s_axi_CRTLS_ARREADY),
    .ARADDR(s_axi_CRTLS_ARADDR),
    .RVALID(s_axi_CRTLS_RVALID),
    .RREADY(s_axi_CRTLS_RREADY),
    .RDATA(s_axi_CRTLS_RDATA),
    .RRESP(s_axi_CRTLS_RRESP),
    .BVALID(s_axi_CRTLS_BVALID),
    .BREADY(s_axi_CRTLS_BREADY),
    .BRESP(s_axi_CRTLS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(64'd0),
    .input_r(input_r),
    .hash(hash),
    .hash_ap_vld(hash_ap_vld)
);

SHA256_h0 #(
    .DataWidth( 7 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
h0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(h0_address0),
    .ce0(h0_ce0),
    .we0(h0_we0),
    .d0(h0_d0),
    .q0(h0_q0)
);

SHA256_h0 #(
    .DataWidth( 7 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
h1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(h1_address0),
    .ce0(h1_ce0),
    .we0(h1_we0),
    .d0(h1_d0),
    .q0(h1_q0)
);

SHA256_h0 #(
    .DataWidth( 7 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
h2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(h2_address0),
    .ce0(h2_ce0),
    .we0(h2_we0),
    .d0(h2_d0),
    .q0(h2_q0)
);

SHA256_h0 #(
    .DataWidth( 7 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
h3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(h3_address0),
    .ce0(h3_ce0),
    .we0(h3_we0),
    .d0(h3_d0),
    .q0(h3_q0)
);

SHA256_h0 #(
    .DataWidth( 7 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
h4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(h4_address0),
    .ce0(h4_ce0),
    .we0(h4_we0),
    .d0(h4_d0),
    .q0(h4_q0)
);

SHA256_h0 #(
    .DataWidth( 7 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
h5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(h5_address0),
    .ce0(h5_ce0),
    .we0(h5_we0),
    .d0(h5_d0),
    .q0(h5_q0)
);

SHA256_h0 #(
    .DataWidth( 7 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
h6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(h6_address0),
    .ce0(h6_ce0),
    .we0(h6_we0),
    .d0(h6_d0),
    .q0(h6_q0)
);

SHA256_h0 #(
    .DataWidth( 7 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
h7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(h7_address0),
    .ce0(h7_ce0),
    .we0(h7_we0),
    .d0(h7_d0),
    .q0(h7_q0)
);

SHA256_hexToBin grp_hexToBin_fu_411(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_hexToBin_fu_411_ap_start),
    .ap_done(grp_hexToBin_fu_411_ap_done),
    .ap_idle(grp_hexToBin_fu_411_ap_idle),
    .ap_ready(grp_hexToBin_fu_411_ap_ready),
    .string_r_address0(grp_hexToBin_fu_411_string_r_address0),
    .string_r_ce0(grp_hexToBin_fu_411_string_r_ce0),
    .string_r_q0(grp_hexToBin_fu_411_string_r_q0),
    .bits_address0(grp_hexToBin_fu_411_bits_address0),
    .bits_ce0(grp_hexToBin_fu_411_bits_ce0),
    .bits_we0(grp_hexToBin_fu_411_bits_we0),
    .bits_d0(grp_hexToBin_fu_411_bits_d0),
    .bits_q0(grp_hexToBin_fu_411_bits_q0)
);

SHA256_hexToBin grp_hexToBin_fu_453(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_hexToBin_fu_453_ap_start),
    .ap_done(grp_hexToBin_fu_453_ap_done),
    .ap_idle(grp_hexToBin_fu_453_ap_idle),
    .ap_ready(grp_hexToBin_fu_453_ap_ready),
    .string_r_address0(grp_hexToBin_fu_453_string_r_address0),
    .string_r_ce0(grp_hexToBin_fu_453_string_r_ce0),
    .string_r_q0(p_str_2_q0),
    .bits_address0(grp_hexToBin_fu_453_bits_address0),
    .bits_ce0(grp_hexToBin_fu_453_bits_ce0),
    .bits_we0(grp_hexToBin_fu_453_bits_we0),
    .bits_d0(grp_hexToBin_fu_453_bits_d0),
    .bits_q0(h2_q0)
);

SHA256_hexToBin grp_hexToBin_fu_494(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_hexToBin_fu_494_ap_start),
    .ap_done(grp_hexToBin_fu_494_ap_done),
    .ap_idle(grp_hexToBin_fu_494_ap_idle),
    .ap_ready(grp_hexToBin_fu_494_ap_ready),
    .string_r_address0(grp_hexToBin_fu_494_string_r_address0),
    .string_r_ce0(grp_hexToBin_fu_494_string_r_ce0),
    .string_r_q0(p_str_3_q0),
    .bits_address0(grp_hexToBin_fu_494_bits_address0),
    .bits_ce0(grp_hexToBin_fu_494_bits_ce0),
    .bits_we0(grp_hexToBin_fu_494_bits_we0),
    .bits_d0(grp_hexToBin_fu_494_bits_d0),
    .bits_q0(h3_q0)
);

SHA256_hexToBin grp_hexToBin_fu_535(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_hexToBin_fu_535_ap_start),
    .ap_done(grp_hexToBin_fu_535_ap_done),
    .ap_idle(grp_hexToBin_fu_535_ap_idle),
    .ap_ready(grp_hexToBin_fu_535_ap_ready),
    .string_r_address0(grp_hexToBin_fu_535_string_r_address0),
    .string_r_ce0(grp_hexToBin_fu_535_string_r_ce0),
    .string_r_q0(p_str_4_q0),
    .bits_address0(grp_hexToBin_fu_535_bits_address0),
    .bits_ce0(grp_hexToBin_fu_535_bits_ce0),
    .bits_we0(grp_hexToBin_fu_535_bits_we0),
    .bits_d0(grp_hexToBin_fu_535_bits_d0),
    .bits_q0(h4_q0)
);

SHA256_hexToBin grp_hexToBin_fu_576(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_hexToBin_fu_576_ap_start),
    .ap_done(grp_hexToBin_fu_576_ap_done),
    .ap_idle(grp_hexToBin_fu_576_ap_idle),
    .ap_ready(grp_hexToBin_fu_576_ap_ready),
    .string_r_address0(grp_hexToBin_fu_576_string_r_address0),
    .string_r_ce0(grp_hexToBin_fu_576_string_r_ce0),
    .string_r_q0(p_str_4_q0),
    .bits_address0(grp_hexToBin_fu_576_bits_address0),
    .bits_ce0(grp_hexToBin_fu_576_bits_ce0),
    .bits_we0(grp_hexToBin_fu_576_bits_we0),
    .bits_d0(grp_hexToBin_fu_576_bits_d0),
    .bits_q0(h0_q0)
);

SHA256_hexToBin grp_hexToBin_fu_617(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_hexToBin_fu_617_ap_start),
    .ap_done(grp_hexToBin_fu_617_ap_done),
    .ap_idle(grp_hexToBin_fu_617_ap_idle),
    .ap_ready(grp_hexToBin_fu_617_ap_ready),
    .string_r_address0(grp_hexToBin_fu_617_string_r_address0),
    .string_r_ce0(grp_hexToBin_fu_617_string_r_ce0),
    .string_r_q0(p_str_5_q0),
    .bits_address0(grp_hexToBin_fu_617_bits_address0),
    .bits_ce0(grp_hexToBin_fu_617_bits_ce0),
    .bits_we0(grp_hexToBin_fu_617_bits_we0),
    .bits_d0(grp_hexToBin_fu_617_bits_d0),
    .bits_q0(h5_q0)
);

SHA256_hexToBin grp_hexToBin_fu_658(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_hexToBin_fu_658_ap_start),
    .ap_done(grp_hexToBin_fu_658_ap_done),
    .ap_idle(grp_hexToBin_fu_658_ap_idle),
    .ap_ready(grp_hexToBin_fu_658_ap_ready),
    .string_r_address0(grp_hexToBin_fu_658_string_r_address0),
    .string_r_ce0(grp_hexToBin_fu_658_string_r_ce0),
    .string_r_q0(p_str_6_q0),
    .bits_address0(grp_hexToBin_fu_658_bits_address0),
    .bits_ce0(grp_hexToBin_fu_658_bits_ce0),
    .bits_we0(grp_hexToBin_fu_658_bits_we0),
    .bits_d0(grp_hexToBin_fu_658_bits_d0),
    .bits_q0(h6_q0)
);

SHA256_hexToBin grp_hexToBin_fu_699(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_hexToBin_fu_699_ap_start),
    .ap_done(grp_hexToBin_fu_699_ap_done),
    .ap_idle(grp_hexToBin_fu_699_ap_idle),
    .ap_ready(grp_hexToBin_fu_699_ap_ready),
    .string_r_address0(grp_hexToBin_fu_699_string_r_address0),
    .string_r_ce0(grp_hexToBin_fu_699_string_r_ce0),
    .string_r_q0(p_str_7_q0),
    .bits_address0(grp_hexToBin_fu_699_bits_address0),
    .bits_ce0(grp_hexToBin_fu_699_bits_ce0),
    .bits_we0(grp_hexToBin_fu_699_bits_we0),
    .bits_d0(grp_hexToBin_fu_699_bits_d0),
    .bits_q0(h7_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp9_exit_iter0_state25) & (1'b1 == ap_CS_fsm_pp9_stage1) & (1'b0 == ap_block_pp9_stage1_subdone))) begin
            ap_enable_reg_pp9_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state23) & (1'b0 == ap_block_state23_on_subcall_done))) begin
            ap_enable_reg_pp9_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp9_exit_iter0_state25) & (1'b1 == ap_CS_fsm_pp9_stage1) & (1'b0 == ap_block_pp9_stage1_subdone))) begin
            ap_enable_reg_pp9_iter1 <= (1'b1 ^ ap_condition_pp9_exit_iter0_state25);
        end else if (((1'b1 == ap_CS_fsm_pp9_stage1) & (1'b0 == ap_block_pp9_stage1_subdone))) begin
            ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
        end else if (((1'b1 == ap_CS_fsm_state23) & (1'b0 == ap_block_state23_on_subcall_done))) begin
            ap_enable_reg_pp9_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_hexToBin_fu_411_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20))) begin
            grp_hexToBin_fu_411_ap_start_reg <= 1'b1;
        end else if ((grp_hexToBin_fu_411_ap_ready == 1'b1)) begin
            grp_hexToBin_fu_411_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_hexToBin_fu_453_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state22)) begin
            grp_hexToBin_fu_453_ap_start_reg <= 1'b1;
        end else if ((grp_hexToBin_fu_453_ap_ready == 1'b1)) begin
            grp_hexToBin_fu_453_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_hexToBin_fu_494_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state22)) begin
            grp_hexToBin_fu_494_ap_start_reg <= 1'b1;
        end else if ((grp_hexToBin_fu_494_ap_ready == 1'b1)) begin
            grp_hexToBin_fu_494_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_hexToBin_fu_535_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state22)) begin
            grp_hexToBin_fu_535_ap_start_reg <= 1'b1;
        end else if ((grp_hexToBin_fu_535_ap_ready == 1'b1)) begin
            grp_hexToBin_fu_535_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_hexToBin_fu_576_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state22)) begin
            grp_hexToBin_fu_576_ap_start_reg <= 1'b1;
        end else if ((grp_hexToBin_fu_576_ap_ready == 1'b1)) begin
            grp_hexToBin_fu_576_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_hexToBin_fu_617_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state22)) begin
            grp_hexToBin_fu_617_ap_start_reg <= 1'b1;
        end else if ((grp_hexToBin_fu_617_ap_ready == 1'b1)) begin
            grp_hexToBin_fu_617_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_hexToBin_fu_658_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state22)) begin
            grp_hexToBin_fu_658_ap_start_reg <= 1'b1;
        end else if ((grp_hexToBin_fu_658_ap_ready == 1'b1)) begin
            grp_hexToBin_fu_658_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_hexToBin_fu_699_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state22)) begin
            grp_hexToBin_fu_699_ap_start_reg <= 1'b1;
        end else if ((grp_hexToBin_fu_699_ap_ready == 1'b1)) begin
            grp_hexToBin_fu_699_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_16_reg_311 <= 4'd0;
    end else if (((exitcond238_fu_763_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        empty_16_reg_311 <= empty_17_fu_757_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        empty_19_reg_322 <= 4'd0;
    end else if (((exitcond227_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        empty_19_reg_322 <= empty_20_fu_774_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        empty_22_reg_333 <= 4'd0;
    end else if (((exitcond216_fu_797_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        empty_22_reg_333 <= empty_23_fu_791_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        empty_25_reg_344 <= 4'd0;
    end else if (((exitcond205_fu_814_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        empty_25_reg_344 <= empty_26_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        empty_28_reg_355 <= 4'd0;
    end else if (((exitcond194_fu_831_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        empty_28_reg_355 <= empty_29_fu_825_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        empty_31_reg_366 <= 4'd0;
    end else if (((exitcond183_fu_848_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        empty_31_reg_366 <= empty_32_fu_842_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        empty_34_reg_377 <= 4'd0;
    end else if (((exitcond172_fu_865_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        empty_34_reg_377 <= empty_35_fu_859_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        empty_37_reg_388 <= 4'd0;
    end else if (((exitcond1_fu_882_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        empty_37_reg_388 <= empty_38_fu_876_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (1'b0 == ap_block_state23_on_subcall_done))) begin
        i_3_reg_399 <= 64'd0;
    end else if (((ap_enable_reg_pp9_iter1 == 1'b1) & (icmp_ln472_1_reg_1002 == 1'd0) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        i_3_reg_399 <= add_ln474_1_reg_987;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_300 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln472_fu_746_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_300 <= add_ln474_fu_740_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp9_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        add_ln474_1_reg_987 <= add_ln474_1_fu_893_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp9_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage1) & (1'b0 == ap_block_pp9_stage1_11001))) begin
        h0_load_reg_997 <= h0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp9_stage1) & (1'b0 == ap_block_pp9_stage1_11001))) begin
        icmp_ln472_1_reg_1002 <= icmp_ln472_1_fu_899_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln472_reg_914 <= icmp_ln472_fu_746_p2;
    end
end

always @ (*) begin
    if ((icmp_ln472_fu_746_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln472_1_fu_899_p2 == 1'd1)) begin
        ap_condition_pp9_exit_iter0_state25 = 1'b1;
    end else begin
        ap_condition_pp9_exit_iter0_state25 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter1 == 1'b0) & (ap_enable_reg_pp9_iter0 == 1'b0))) begin
        ap_idle_pp9 = 1'b1;
    end else begin
        ap_idle_pp9 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter1 == 1'b1) & (icmp_ln472_1_reg_1002 == 1'd0) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0))) begin
        ap_phi_mux_i_3_phi_fu_403_p4 = add_ln474_1_reg_987;
    end else begin
        ap_phi_mux_i_3_phi_fu_403_p4 = i_3_reg_399;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_hexToBin_fu_411_bits_q0 = h1_q0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_hexToBin_fu_411_bits_q0 = h0_q0;
    end else begin
        grp_hexToBin_fu_411_bits_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_hexToBin_fu_411_string_r_q0 = p_str_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_hexToBin_fu_411_string_r_q0 = p_str_q0;
    end else begin
        grp_hexToBin_fu_411_string_r_q0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0))) begin
        h0_address0 = ap_phi_mux_i_3_phi_fu_403_p4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        h0_address0 = p_cast_fu_769_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h0_address0 = grp_hexToBin_fu_576_bits_address0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        h0_address0 = grp_hexToBin_fu_411_bits_address0;
    end else begin
        h0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_enable_reg_pp9_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_11001)))) begin
        h0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h0_ce0 = grp_hexToBin_fu_576_bits_ce0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        h0_ce0 = grp_hexToBin_fu_411_bits_ce0;
    end else begin
        h0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        h0_d0 = 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h0_d0 = grp_hexToBin_fu_576_bits_d0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        h0_d0 = grp_hexToBin_fu_411_bits_d0;
    end else begin
        h0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond238_fu_763_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        h0_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h0_we0 = grp_hexToBin_fu_576_bits_we0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        h0_we0 = grp_hexToBin_fu_411_bits_we0;
    end else begin
        h0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        h1_address0 = p_cast1_fu_786_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h1_address0 = grp_hexToBin_fu_411_bits_address0;
    end else begin
        h1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        h1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h1_ce0 = grp_hexToBin_fu_411_bits_ce0;
    end else begin
        h1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        h1_d0 = 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h1_d0 = grp_hexToBin_fu_411_bits_d0;
    end else begin
        h1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond227_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        h1_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h1_we0 = grp_hexToBin_fu_411_bits_we0;
    end else begin
        h1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        h2_address0 = p_cast2_fu_803_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h2_address0 = grp_hexToBin_fu_453_bits_address0;
    end else begin
        h2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        h2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h2_ce0 = grp_hexToBin_fu_453_bits_ce0;
    end else begin
        h2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        h2_d0 = 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h2_d0 = grp_hexToBin_fu_453_bits_d0;
    end else begin
        h2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond216_fu_797_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        h2_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h2_we0 = grp_hexToBin_fu_453_bits_we0;
    end else begin
        h2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        h3_address0 = p_cast3_fu_820_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h3_address0 = grp_hexToBin_fu_494_bits_address0;
    end else begin
        h3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        h3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h3_ce0 = grp_hexToBin_fu_494_bits_ce0;
    end else begin
        h3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        h3_d0 = 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h3_d0 = grp_hexToBin_fu_494_bits_d0;
    end else begin
        h3_d0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond205_fu_814_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        h3_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h3_we0 = grp_hexToBin_fu_494_bits_we0;
    end else begin
        h3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        h4_address0 = p_cast4_fu_837_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h4_address0 = grp_hexToBin_fu_535_bits_address0;
    end else begin
        h4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        h4_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h4_ce0 = grp_hexToBin_fu_535_bits_ce0;
    end else begin
        h4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        h4_d0 = 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h4_d0 = grp_hexToBin_fu_535_bits_d0;
    end else begin
        h4_d0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond194_fu_831_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        h4_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h4_we0 = grp_hexToBin_fu_535_bits_we0;
    end else begin
        h4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        h5_address0 = p_cast5_fu_854_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h5_address0 = grp_hexToBin_fu_617_bits_address0;
    end else begin
        h5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        h5_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h5_ce0 = grp_hexToBin_fu_617_bits_ce0;
    end else begin
        h5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        h5_d0 = 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h5_d0 = grp_hexToBin_fu_617_bits_d0;
    end else begin
        h5_d0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond183_fu_848_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        h5_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h5_we0 = grp_hexToBin_fu_617_bits_we0;
    end else begin
        h5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        h6_address0 = p_cast6_fu_871_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h6_address0 = grp_hexToBin_fu_658_bits_address0;
    end else begin
        h6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        h6_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h6_ce0 = grp_hexToBin_fu_658_bits_ce0;
    end else begin
        h6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        h6_d0 = 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h6_d0 = grp_hexToBin_fu_658_bits_d0;
    end else begin
        h6_d0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond172_fu_865_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        h6_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h6_we0 = grp_hexToBin_fu_658_bits_we0;
    end else begin
        h6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        h7_address0 = p_cast7_fu_888_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h7_address0 = grp_hexToBin_fu_699_bits_address0;
    end else begin
        h7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        h7_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h7_ce0 = grp_hexToBin_fu_699_bits_ce0;
    end else begin
        h7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        h7_d0 = 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h7_d0 = grp_hexToBin_fu_699_bits_d0;
    end else begin
        h7_d0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond1_fu_882_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        h7_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h7_we0 = grp_hexToBin_fu_699_bits_we0;
    end else begin
        h7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter1 == 1'b1) & (icmp_ln472_1_reg_1002 == 1'd0) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_01001))) begin
        hash = zext_ln472_fu_905_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln472_reg_914 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        hash = p_str_8_q0;
    end else begin
        hash = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp9_iter1 == 1'b1) & (icmp_ln472_1_reg_1002 == 1'd0) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln472_reg_914 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        hash_ap_vld = 1'b1;
    end else begin
        hash_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        p_str_1_ce0 = grp_hexToBin_fu_411_string_r_ce0;
    end else begin
        p_str_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        p_str_4_address0 = grp_hexToBin_fu_576_string_r_address0;
    end else begin
        p_str_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        p_str_4_ce0 = grp_hexToBin_fu_576_string_r_ce0;
    end else begin
        p_str_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_str_8_ce0 = 1'b1;
    end else begin
        p_str_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        p_str_ce0 = grp_hexToBin_fu_411_string_r_ce0;
    end else begin
        p_str_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln472_fu_746_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln472_fu_746_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond238_fu_763_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond227_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((exitcond216_fu_797_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((exitcond205_fu_814_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((exitcond194_fu_831_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((exitcond183_fu_848_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((exitcond172_fu_865_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((exitcond1_fu_882_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_hexToBin_fu_411_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (1'b0 == ap_block_state23_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_pp9_stage0 : begin
            if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end
        end
        ap_ST_fsm_pp9_stage1 : begin
            if ((~((icmp_ln472_1_fu_899_p2 == 1'd1) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b0 == ap_block_pp9_stage1_subdone)) & (1'b0 == ap_block_pp9_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end else if (((icmp_ln472_1_fu_899_p2 == 1'd1) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b0 == ap_block_pp9_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage1;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln474_1_fu_893_p2 = (ap_phi_mux_i_3_phi_fu_403_p4 + 64'd1);

assign add_ln474_fu_740_p2 = (i_reg_300 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp9_stage0 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp9_stage1 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_on_subcall_done = ((grp_hexToBin_fu_699_ap_done == 1'b0) | (grp_hexToBin_fu_658_ap_done == 1'b0) | (grp_hexToBin_fu_617_ap_done == 1'b0) | (grp_hexToBin_fu_576_ap_done == 1'b0) | (grp_hexToBin_fu_535_ap_done == 1'b0) | (grp_hexToBin_fu_494_ap_done == 1'b0) | (grp_hexToBin_fu_453_ap_done == 1'b0) | (grp_hexToBin_fu_411_ap_done == 1'b0));
end

assign ap_block_state24_pp9_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp9_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp9_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp9 = (ap_idle_pp9 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_17_fu_757_p2 = (empty_16_reg_311 + 4'd1);

assign empty_20_fu_774_p2 = (empty_19_reg_322 + 4'd1);

assign empty_23_fu_791_p2 = (empty_22_reg_333 + 4'd1);

assign empty_26_fu_808_p2 = (empty_25_reg_344 + 4'd1);

assign empty_29_fu_825_p2 = (empty_28_reg_355 + 4'd1);

assign empty_32_fu_842_p2 = (empty_31_reg_366 + 4'd1);

assign empty_35_fu_859_p2 = (empty_34_reg_377 + 4'd1);

assign empty_38_fu_876_p2 = (empty_37_reg_388 + 4'd1);

assign exitcond172_fu_865_p2 = ((empty_34_reg_377 == 4'd12) ? 1'b1 : 1'b0);

assign exitcond183_fu_848_p2 = ((empty_31_reg_366 == 4'd12) ? 1'b1 : 1'b0);

assign exitcond194_fu_831_p2 = ((empty_28_reg_355 == 4'd12) ? 1'b1 : 1'b0);

assign exitcond1_fu_882_p2 = ((empty_37_reg_388 == 4'd12) ? 1'b1 : 1'b0);

assign exitcond205_fu_814_p2 = ((empty_25_reg_344 == 4'd12) ? 1'b1 : 1'b0);

assign exitcond216_fu_797_p2 = ((empty_22_reg_333 == 4'd12) ? 1'b1 : 1'b0);

assign exitcond227_fu_780_p2 = ((empty_19_reg_322 == 4'd12) ? 1'b1 : 1'b0);

assign exitcond238_fu_763_p2 = ((empty_16_reg_311 == 4'd12) ? 1'b1 : 1'b0);

assign grp_hexToBin_fu_411_ap_start = grp_hexToBin_fu_411_ap_start_reg;

assign grp_hexToBin_fu_453_ap_start = grp_hexToBin_fu_453_ap_start_reg;

assign grp_hexToBin_fu_494_ap_start = grp_hexToBin_fu_494_ap_start_reg;

assign grp_hexToBin_fu_535_ap_start = grp_hexToBin_fu_535_ap_start_reg;

assign grp_hexToBin_fu_576_ap_start = grp_hexToBin_fu_576_ap_start_reg;

assign grp_hexToBin_fu_617_ap_start = grp_hexToBin_fu_617_ap_start_reg;

assign grp_hexToBin_fu_658_ap_start = grp_hexToBin_fu_658_ap_start_reg;

assign grp_hexToBin_fu_699_ap_start = grp_hexToBin_fu_699_ap_start_reg;

assign i_cast_fu_752_p1 = i_reg_300;

assign icmp_ln472_1_fu_899_p2 = ((h0_q0 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln472_fu_746_p2 = ((i_reg_300 == 6'd34) ? 1'b1 : 1'b0);

assign p_cast1_fu_786_p1 = empty_19_reg_322;

assign p_cast2_fu_803_p1 = empty_22_reg_333;

assign p_cast3_fu_820_p1 = empty_25_reg_344;

assign p_cast4_fu_837_p1 = empty_28_reg_355;

assign p_cast5_fu_854_p1 = empty_31_reg_366;

assign p_cast6_fu_871_p1 = empty_34_reg_377;

assign p_cast7_fu_888_p1 = empty_37_reg_388;

assign p_cast_fu_769_p1 = empty_16_reg_311;

assign p_str_8_address0 = i_cast_fu_752_p1;

assign zext_ln472_fu_905_p1 = h0_load_reg_997;

endmodule //SHA256
