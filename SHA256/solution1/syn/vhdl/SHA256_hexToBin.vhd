-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SHA256_hexToBin is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    string_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    string_r_ce0 : OUT STD_LOGIC;
    string_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bits_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bits_ce0 : OUT STD_LOGIC;
    bits_we0 : OUT STD_LOGIC;
    bits_d0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bits_q0 : IN STD_LOGIC_VECTOR (6 downto 0) );
end;


architecture behav of SHA256_hexToBin is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_30 : STD_LOGIC_VECTOR (7 downto 0) := "00110000";
    constant ap_const_lv8_31 : STD_LOGIC_VECTOR (7 downto 0) := "00110001";
    constant ap_const_lv8_32 : STD_LOGIC_VECTOR (7 downto 0) := "00110010";
    constant ap_const_lv8_33 : STD_LOGIC_VECTOR (7 downto 0) := "00110011";
    constant ap_const_lv8_34 : STD_LOGIC_VECTOR (7 downto 0) := "00110100";
    constant ap_const_lv8_35 : STD_LOGIC_VECTOR (7 downto 0) := "00110101";
    constant ap_const_lv8_36 : STD_LOGIC_VECTOR (7 downto 0) := "00110110";
    constant ap_const_lv8_37 : STD_LOGIC_VECTOR (7 downto 0) := "00110111";
    constant ap_const_lv8_38 : STD_LOGIC_VECTOR (7 downto 0) := "00111000";
    constant ap_const_lv8_39 : STD_LOGIC_VECTOR (7 downto 0) := "00111001";
    constant ap_const_lv8_41 : STD_LOGIC_VECTOR (7 downto 0) := "01000001";
    constant ap_const_lv8_42 : STD_LOGIC_VECTOR (7 downto 0) := "01000010";
    constant ap_const_lv8_43 : STD_LOGIC_VECTOR (7 downto 0) := "01000011";
    constant ap_const_lv8_44 : STD_LOGIC_VECTOR (7 downto 0) := "01000100";
    constant ap_const_lv8_45 : STD_LOGIC_VECTOR (7 downto 0) := "01000101";
    constant ap_const_lv8_46 : STD_LOGIC_VECTOR (7 downto 0) := "01000110";
    constant ap_const_lv8_61 : STD_LOGIC_VECTOR (7 downto 0) := "01100001";
    constant ap_const_lv8_62 : STD_LOGIC_VECTOR (7 downto 0) := "01100010";
    constant ap_const_lv8_63 : STD_LOGIC_VECTOR (7 downto 0) := "01100011";
    constant ap_const_lv8_64 : STD_LOGIC_VECTOR (7 downto 0) := "01100100";
    constant ap_const_lv8_65 : STD_LOGIC_VECTOR (7 downto 0) := "01100101";
    constant ap_const_lv8_66 : STD_LOGIC_VECTOR (7 downto 0) := "01100110";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_str_25_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_25_ce0 : STD_LOGIC;
    signal p_str_25_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_str_24_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_24_ce0 : STD_LOGIC;
    signal p_str_24_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_str_23_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_23_ce0 : STD_LOGIC;
    signal p_str_23_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_str_22_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_22_ce0 : STD_LOGIC;
    signal p_str_22_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_str_21_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_21_ce0 : STD_LOGIC;
    signal p_str_21_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_str_20_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_20_ce0 : STD_LOGIC;
    signal p_str_20_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_str_19_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_19_ce0 : STD_LOGIC;
    signal p_str_19_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_str_18_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_18_ce0 : STD_LOGIC;
    signal p_str_18_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_str_17_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_17_ce0 : STD_LOGIC;
    signal p_str_17_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_str_16_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_16_ce0 : STD_LOGIC;
    signal p_str_16_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_str_15_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_15_ce0 : STD_LOGIC;
    signal p_str_15_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_str_14_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_14_ce0 : STD_LOGIC;
    signal p_str_14_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_str_13_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_13_ce0 : STD_LOGIC;
    signal p_str_13_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_str_12_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_12_ce0 : STD_LOGIC;
    signal p_str_12_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_str_11_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_11_ce0 : STD_LOGIC;
    signal p_str_11_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_str_10_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_10_ce0 : STD_LOGIC;
    signal p_str_10_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_str_9_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_9_ce0 : STD_LOGIC;
    signal p_str_9_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_568 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_reg_603 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_656 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln322_fu_665_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln322_reg_935 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln318_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln319_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln481_fu_693_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln488_fu_705_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal retval_0_i8_reg_480 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_str_19_addr_gep_fu_398_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_20_addr_gep_fu_406_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_21_addr_gep_fu_414_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_22_addr_gep_fu_422_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_23_addr_gep_fu_430_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_str_24_addr_gep_fu_438_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln494_fu_709_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln494_reg_1089 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal icmp_ln491_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln491_reg_1094 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln493_fu_929_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_condition_pp1_flush_enable : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal i_reg_467 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_1_reg_555 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln480_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_j_phi_fu_572_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_empty_phi_fu_607_p46 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln491_fu_913_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_reg_pp1_iter0_empty_reg_603 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_fu_908_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_1_fu_899_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_2_fu_890_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_3_fu_881_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_4_fu_872_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_5_fu_863_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_6_fu_854_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_7_fu_845_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_8_fu_836_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_9_fu_827_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_10_fu_818_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_11_fu_809_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_12_fu_800_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_13_fu_791_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_14_fu_782_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_15_fu_773_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_16_fu_764_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_17_fu_755_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_18_fu_746_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_19_fu_737_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_20_fu_728_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln491_21_fu_719_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_cast1_fu_924_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_677_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal trunc_ln491_22_fu_715_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_21_fu_724_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_20_fu_733_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_19_fu_742_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_18_fu_751_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_17_fu_760_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_16_fu_769_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_15_fu_778_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_14_fu_787_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_13_fu_796_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_12_fu_805_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_11_fu_814_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_10_fu_823_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_9_fu_832_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_8_fu_841_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_7_fu_850_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_6_fu_859_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_5_fu_868_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_4_fu_877_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_3_fu_886_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_2_fu_895_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln491_1_fu_904_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_condition_362 : BOOLEAN;
    signal ap_condition_378 : BOOLEAN;
    signal ap_condition_614 : BOOLEAN;
    signal ap_condition_875 : BOOLEAN;
    signal ap_condition_557 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component SHA256_hexToBin_p_str_25 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SHA256_hexToBin_p_str_24 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SHA256_hexToBin_p_str_23 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SHA256_hexToBin_p_str_22 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SHA256_hexToBin_p_str_21 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SHA256_hexToBin_p_str_20 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SHA256_hexToBin_p_str_19 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SHA256_hexToBin_p_str_18 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SHA256_hexToBin_p_str_17 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SHA256_hexToBin_p_str_16 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SHA256_hexToBin_p_str_15 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SHA256_hexToBin_p_str_14 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SHA256_hexToBin_p_str_13 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SHA256_hexToBin_p_str_12 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SHA256_hexToBin_p_str_11 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SHA256_hexToBin_p_str_10 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SHA256_hexToBin_p_str_9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    p_str_25_U : component SHA256_hexToBin_p_str_25
    generic map (
        DataWidth => 8,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str_25_address0,
        ce0 => p_str_25_ce0,
        q0 => p_str_25_q0);

    p_str_24_U : component SHA256_hexToBin_p_str_24
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str_24_address0,
        ce0 => p_str_24_ce0,
        q0 => p_str_24_q0);

    p_str_23_U : component SHA256_hexToBin_p_str_23
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str_23_address0,
        ce0 => p_str_23_ce0,
        q0 => p_str_23_q0);

    p_str_22_U : component SHA256_hexToBin_p_str_22
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str_22_address0,
        ce0 => p_str_22_ce0,
        q0 => p_str_22_q0);

    p_str_21_U : component SHA256_hexToBin_p_str_21
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str_21_address0,
        ce0 => p_str_21_ce0,
        q0 => p_str_21_q0);

    p_str_20_U : component SHA256_hexToBin_p_str_20
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str_20_address0,
        ce0 => p_str_20_ce0,
        q0 => p_str_20_q0);

    p_str_19_U : component SHA256_hexToBin_p_str_19
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str_19_address0,
        ce0 => p_str_19_ce0,
        q0 => p_str_19_q0);

    p_str_18_U : component SHA256_hexToBin_p_str_18
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str_18_address0,
        ce0 => p_str_18_ce0,
        q0 => p_str_18_q0);

    p_str_17_U : component SHA256_hexToBin_p_str_17
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str_17_address0,
        ce0 => p_str_17_ce0,
        q0 => p_str_17_q0);

    p_str_16_U : component SHA256_hexToBin_p_str_16
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str_16_address0,
        ce0 => p_str_16_ce0,
        q0 => p_str_16_q0);

    p_str_15_U : component SHA256_hexToBin_p_str_15
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str_15_address0,
        ce0 => p_str_15_ce0,
        q0 => p_str_15_q0);

    p_str_14_U : component SHA256_hexToBin_p_str_14
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str_14_address0,
        ce0 => p_str_14_ce0,
        q0 => p_str_14_q0);

    p_str_13_U : component SHA256_hexToBin_p_str_13
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str_13_address0,
        ce0 => p_str_13_ce0,
        q0 => p_str_13_q0);

    p_str_12_U : component SHA256_hexToBin_p_str_12
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str_12_address0,
        ce0 => p_str_12_ce0,
        q0 => p_str_12_q0);

    p_str_11_U : component SHA256_hexToBin_p_str_11
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str_11_address0,
        ce0 => p_str_11_ce0,
        q0 => p_str_11_q0);

    p_str_10_U : component SHA256_hexToBin_p_str_10
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str_10_address0,
        ce0 => p_str_10_ce0,
        q0 => p_str_10_q0);

    p_str_9_U : component SHA256_hexToBin_p_str_9
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str_9_address0,
        ce0 => p_str_9_ce0,
        q0 => p_str_9_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp1_flush_enable)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_reg_603_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_378)) then
                if ((retval_0_i8_reg_480 = ap_const_lv5_16)) then 
                    empty_reg_603 <= zext_ln491_21_fu_719_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_15)) then 
                    empty_reg_603 <= zext_ln491_20_fu_728_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_14)) then 
                    empty_reg_603 <= zext_ln491_19_fu_737_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_13)) then 
                    empty_reg_603 <= zext_ln491_18_fu_746_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_12)) then 
                    empty_reg_603 <= zext_ln491_17_fu_755_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_11)) then 
                    empty_reg_603 <= zext_ln491_16_fu_764_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_10)) then 
                    empty_reg_603 <= zext_ln491_15_fu_773_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_F)) then 
                    empty_reg_603 <= zext_ln491_14_fu_782_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_E)) then 
                    empty_reg_603 <= zext_ln491_13_fu_791_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_D)) then 
                    empty_reg_603 <= zext_ln491_12_fu_800_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_C)) then 
                    empty_reg_603 <= zext_ln491_11_fu_809_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_B)) then 
                    empty_reg_603 <= zext_ln491_10_fu_818_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_A)) then 
                    empty_reg_603 <= zext_ln491_9_fu_827_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_9)) then 
                    empty_reg_603 <= zext_ln491_8_fu_836_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_8)) then 
                    empty_reg_603 <= zext_ln491_7_fu_845_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_7)) then 
                    empty_reg_603 <= zext_ln491_6_fu_854_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_6)) then 
                    empty_reg_603 <= zext_ln491_5_fu_863_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_5)) then 
                    empty_reg_603 <= zext_ln491_4_fu_872_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_4)) then 
                    empty_reg_603 <= zext_ln491_3_fu_881_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_3)) then 
                    empty_reg_603 <= zext_ln491_2_fu_890_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_2)) then 
                    empty_reg_603 <= zext_ln491_1_fu_899_p1;
                elsif ((retval_0_i8_reg_480 = ap_const_lv5_1)) then 
                    empty_reg_603 <= zext_ln491_fu_908_p1;
                elsif ((ap_const_boolean_1 = ap_condition_362)) then 
                    empty_reg_603 <= trunc_ln491_fu_913_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    empty_reg_603 <= ap_phi_reg_pp1_iter0_empty_reg_603;
                end if;
            end if; 
        end if;
    end process;

    i_1_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln319_fu_687_p2 = ap_const_lv1_1) and (icmp_ln318_fu_671_p2 = ap_const_lv1_0))) then 
                i_1_reg_555 <= ap_const_lv64_0;
            elsif (((icmp_ln480_fu_699_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_1_reg_555 <= add_ln481_fu_693_p2;
            end if; 
        end if;
    end process;

    i_2_reg_656_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_2_reg_656 <= trunc_ln488_fu_705_p1;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln491_reg_1094 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_2_reg_656 <= add_ln493_fu_929_p2;
            end if; 
        end if;
    end process;

    i_reg_467_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_467 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_reg_467 <= add_ln322_reg_935;
            end if; 
        end if;
    end process;

    j_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_reg_568 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln491_reg_1094 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j_reg_568 <= add_ln494_reg_1089;
            end if; 
        end if;
    end process;

    retval_0_i8_reg_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_557)) then
                if ((string_r_q0 = ap_const_lv8_30)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_16;
                elsif ((string_r_q0 = ap_const_lv8_31)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_15;
                elsif ((string_r_q0 = ap_const_lv8_32)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_14;
                elsif ((string_r_q0 = ap_const_lv8_33)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_13;
                elsif ((string_r_q0 = ap_const_lv8_34)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_12;
                elsif ((string_r_q0 = ap_const_lv8_35)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_11;
                elsif ((string_r_q0 = ap_const_lv8_36)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_10;
                elsif ((string_r_q0 = ap_const_lv8_37)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_F;
                elsif ((string_r_q0 = ap_const_lv8_38)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_E;
                elsif ((string_r_q0 = ap_const_lv8_39)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_D;
                elsif ((string_r_q0 = ap_const_lv8_41)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_C;
                elsif ((string_r_q0 = ap_const_lv8_42)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_B;
                elsif ((string_r_q0 = ap_const_lv8_43)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_A;
                elsif ((string_r_q0 = ap_const_lv8_44)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_9;
                elsif ((string_r_q0 = ap_const_lv8_45)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_8;
                elsif ((string_r_q0 = ap_const_lv8_46)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_7;
                elsif ((string_r_q0 = ap_const_lv8_61)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_6;
                elsif ((string_r_q0 = ap_const_lv8_62)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_5;
                elsif ((string_r_q0 = ap_const_lv8_63)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_4;
                elsif ((string_r_q0 = ap_const_lv8_64)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_3;
                elsif ((string_r_q0 = ap_const_lv8_65)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_2;
                elsif ((string_r_q0 = ap_const_lv8_66)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_1;
                elsif ((ap_const_boolean_1 = ap_condition_875)) then 
                    retval_0_i8_reg_480 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln322_reg_935 <= add_ln322_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                add_ln494_reg_1089 <= add_ln494_fu_709_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                icmp_ln491_reg_1094 <= icmp_ln491_fu_918_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln318_fu_671_p2, ap_CS_fsm_state3, icmp_ln319_fu_687_p2, ap_CS_fsm_state5, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage1_subdone, ap_block_pp1_stage0_subdone, icmp_ln480_fu_699_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln318_fu_671_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln319_fu_687_p2 = ap_const_lv1_1) and (icmp_ln318_fu_671_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln480_fu_699_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln322_fu_665_p2 <= std_logic_vector(unsigned(i_reg_467) + unsigned(ap_const_lv64_1));
    add_ln481_fu_693_p2 <= std_logic_vector(unsigned(i_1_reg_555) + unsigned(ap_const_lv64_1));
    add_ln493_fu_929_p2 <= std_logic_vector(unsigned(i_2_reg_656) + unsigned(ap_const_lv4_1));
    add_ln494_fu_709_p2 <= std_logic_vector(unsigned(j_reg_568) + unsigned(ap_const_lv64_1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_362_assign_proc : process(retval_0_i8_reg_480)
    begin
                ap_condition_362 <= ((retval_0_i8_reg_480 = ap_const_lv5_0) or ((retval_0_i8_reg_480 = ap_const_lv5_17) or ((retval_0_i8_reg_480 = ap_const_lv5_18) or ((retval_0_i8_reg_480 = ap_const_lv5_19) or ((retval_0_i8_reg_480 = ap_const_lv5_1A) or ((retval_0_i8_reg_480 = ap_const_lv5_1B) or ((retval_0_i8_reg_480 = ap_const_lv5_1C) or ((retval_0_i8_reg_480 = ap_const_lv5_1D) or ((retval_0_i8_reg_480 = ap_const_lv5_1E) or (retval_0_i8_reg_480 = ap_const_lv5_1F))))))))));
    end process;


    ap_condition_378_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1_11001)
    begin
                ap_condition_378 <= ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1));
    end process;


    ap_condition_557_assign_proc : process(icmp_ln318_fu_671_p2, ap_CS_fsm_state3, icmp_ln319_fu_687_p2)
    begin
                ap_condition_557 <= ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln319_fu_687_p2 = ap_const_lv1_1) and (icmp_ln318_fu_671_p2 = ap_const_lv1_0));
    end process;


    ap_condition_614_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0)
    begin
                ap_condition_614 <= ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0));
    end process;


    ap_condition_875_assign_proc : process(string_r_q0)
    begin
                ap_condition_875 <= (not((string_r_q0 = ap_const_lv8_66)) and not((string_r_q0 = ap_const_lv8_65)) and not((string_r_q0 = ap_const_lv8_64)) and not((string_r_q0 = ap_const_lv8_63)) and not((string_r_q0 = ap_const_lv8_62)) and not((string_r_q0 = ap_const_lv8_61)) and not((string_r_q0 = ap_const_lv8_46)) and not((string_r_q0 = ap_const_lv8_45)) and not((string_r_q0 = ap_const_lv8_44)) and not((string_r_q0 = ap_const_lv8_43)) and not((string_r_q0 = ap_const_lv8_42)) and not((string_r_q0 = ap_const_lv8_41)) and not((string_r_q0 = ap_const_lv8_39)) and not((string_r_q0 = ap_const_lv8_38)) and not((string_r_q0 = ap_const_lv8_37)) and not((string_r_q0 = ap_const_lv8_36)) and not((string_r_q0 = ap_const_lv8_35)) and not((string_r_q0 = ap_const_lv8_34)) and not((string_r_q0 = ap_const_lv8_33)) and not((string_r_q0 = ap_const_lv8_32)) and not((string_r_q0 = ap_const_lv8_31)) and not((string_r_q0 = ap_const_lv8_30)));
    end process;


    ap_condition_pp1_flush_enable_assign_proc : process(ap_CS_fsm_pp1_stage1, icmp_ln491_fu_918_p2, ap_block_pp1_stage1_subdone)
    begin
        if (((icmp_ln491_fu_918_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            ap_condition_pp1_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp1_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln318_fu_671_p2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln318_fu_671_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_607_p46_assign_proc : process(retval_0_i8_reg_480, trunc_ln491_fu_913_p1, ap_phi_reg_pp1_iter0_empty_reg_603, zext_ln491_fu_908_p1, zext_ln491_1_fu_899_p1, zext_ln491_2_fu_890_p1, zext_ln491_3_fu_881_p1, zext_ln491_4_fu_872_p1, zext_ln491_5_fu_863_p1, zext_ln491_6_fu_854_p1, zext_ln491_7_fu_845_p1, zext_ln491_8_fu_836_p1, zext_ln491_9_fu_827_p1, zext_ln491_10_fu_818_p1, zext_ln491_11_fu_809_p1, zext_ln491_12_fu_800_p1, zext_ln491_13_fu_791_p1, zext_ln491_14_fu_782_p1, zext_ln491_15_fu_773_p1, zext_ln491_16_fu_764_p1, zext_ln491_17_fu_755_p1, zext_ln491_18_fu_746_p1, zext_ln491_19_fu_737_p1, zext_ln491_20_fu_728_p1, zext_ln491_21_fu_719_p1)
    begin
        if ((retval_0_i8_reg_480 = ap_const_lv5_16)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_21_fu_719_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_15)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_20_fu_728_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_14)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_19_fu_737_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_13)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_18_fu_746_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_12)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_17_fu_755_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_11)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_16_fu_764_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_10)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_15_fu_773_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_F)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_14_fu_782_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_E)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_13_fu_791_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_D)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_12_fu_800_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_C)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_11_fu_809_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_B)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_10_fu_818_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_A)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_9_fu_827_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_9)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_8_fu_836_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_8)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_7_fu_845_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_7)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_6_fu_854_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_6)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_5_fu_863_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_5)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_4_fu_872_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_4)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_3_fu_881_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_3)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_2_fu_890_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_2)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_1_fu_899_p1;
        elsif ((retval_0_i8_reg_480 = ap_const_lv5_1)) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= zext_ln491_fu_908_p1;
        elsif (((retval_0_i8_reg_480 = ap_const_lv5_0) or ((retval_0_i8_reg_480 = ap_const_lv5_17) or ((retval_0_i8_reg_480 = ap_const_lv5_18) or ((retval_0_i8_reg_480 = ap_const_lv5_19) or ((retval_0_i8_reg_480 = ap_const_lv5_1A) or ((retval_0_i8_reg_480 = ap_const_lv5_1B) or ((retval_0_i8_reg_480 = ap_const_lv5_1C) or ((retval_0_i8_reg_480 = ap_const_lv5_1D) or ((retval_0_i8_reg_480 = ap_const_lv5_1E) or (retval_0_i8_reg_480 = ap_const_lv5_1F))))))))))) then 
            ap_phi_mux_empty_phi_fu_607_p46 <= trunc_ln491_fu_913_p1;
        else 
            ap_phi_mux_empty_phi_fu_607_p46 <= ap_phi_reg_pp1_iter0_empty_reg_603;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_572_p4_assign_proc : process(j_reg_568, ap_CS_fsm_pp1_stage0, add_ln494_reg_1089, icmp_ln491_reg_1094, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln491_reg_1094 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_j_phi_fu_572_p4 <= add_ln494_reg_1089;
        else 
            ap_phi_mux_j_phi_fu_572_p4 <= j_reg_568;
        end if; 
    end process;

    ap_phi_reg_pp1_iter0_empty_reg_603 <= "XXXXXXX";

    ap_ready_assign_proc : process(icmp_ln318_fu_671_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln318_fu_671_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bits_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, i_1_reg_555, ap_block_pp1_stage0, i_2_cast1_fu_924_p1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            bits_address0 <= i_2_cast1_fu_924_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bits_address0 <= i_1_reg_555(4 - 1 downto 0);
        else 
            bits_address0 <= "XXXX";
        end if; 
    end process;


    bits_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            bits_ce0 <= ap_const_logic_1;
        else 
            bits_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bits_d0 <= empty_reg_603;

    bits_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln491_reg_1094, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln491_reg_1094 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            bits_we0 <= ap_const_logic_1;
        else 
            bits_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_cast1_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_656),64));
    icmp_ln318_fu_671_p2 <= "1" when (string_r_q0 = ap_const_lv8_0) else "0";
    icmp_ln319_fu_687_p2 <= "1" when (signed(tmp_fu_677_p4) > signed(ap_const_lv63_0)) else "0";
    icmp_ln480_fu_699_p2 <= "1" when (bits_q0 = ap_const_lv7_0) else "0";
    icmp_ln491_fu_918_p2 <= "1" when (ap_phi_mux_empty_phi_fu_607_p46 = ap_const_lv7_0) else "0";
    p_str_10_address0 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);

    p_str_10_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            p_str_10_ce0 <= ap_const_logic_1;
        else 
            p_str_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str_11_address0 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);

    p_str_11_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            p_str_11_ce0 <= ap_const_logic_1;
        else 
            p_str_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str_12_address0 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);

    p_str_12_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            p_str_12_ce0 <= ap_const_logic_1;
        else 
            p_str_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str_13_address0 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);

    p_str_13_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            p_str_13_ce0 <= ap_const_logic_1;
        else 
            p_str_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str_14_address0 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);

    p_str_14_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            p_str_14_ce0 <= ap_const_logic_1;
        else 
            p_str_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str_15_address0 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);

    p_str_15_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            p_str_15_ce0 <= ap_const_logic_1;
        else 
            p_str_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str_16_address0 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);

    p_str_16_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            p_str_16_ce0 <= ap_const_logic_1;
        else 
            p_str_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str_17_address0 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);

    p_str_17_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            p_str_17_ce0 <= ap_const_logic_1;
        else 
            p_str_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str_18_address0 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);

    p_str_18_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            p_str_18_ce0 <= ap_const_logic_1;
        else 
            p_str_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str_19_addr_gep_fu_398_p3 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);

    p_str_19_address0_assign_proc : process(retval_0_i8_reg_480, p_str_19_addr_gep_fu_398_p3, ap_phi_mux_j_phi_fu_572_p4, ap_condition_614)
    begin
        if ((ap_const_boolean_1 = ap_condition_614)) then
            if ((retval_0_i8_reg_480 = ap_const_lv5_6)) then 
                p_str_19_address0 <= p_str_19_addr_gep_fu_398_p3;
            elsif ((retval_0_i8_reg_480 = ap_const_lv5_C)) then 
                p_str_19_address0 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);
            else 
                p_str_19_address0 <= "XXX";
            end if;
        else 
            p_str_19_address0 <= "XXX";
        end if; 
    end process;


    p_str_19_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, retval_0_i8_reg_480, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (retval_0_i8_reg_480 = ap_const_lv5_6) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (retval_0_i8_reg_480 = ap_const_lv5_C) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            p_str_19_ce0 <= ap_const_logic_1;
        else 
            p_str_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str_20_addr_gep_fu_406_p3 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);

    p_str_20_address0_assign_proc : process(retval_0_i8_reg_480, p_str_20_addr_gep_fu_406_p3, ap_phi_mux_j_phi_fu_572_p4, ap_condition_614)
    begin
        if ((ap_const_boolean_1 = ap_condition_614)) then
            if ((retval_0_i8_reg_480 = ap_const_lv5_5)) then 
                p_str_20_address0 <= p_str_20_addr_gep_fu_406_p3;
            elsif ((retval_0_i8_reg_480 = ap_const_lv5_B)) then 
                p_str_20_address0 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);
            else 
                p_str_20_address0 <= "XXX";
            end if;
        else 
            p_str_20_address0 <= "XXX";
        end if; 
    end process;


    p_str_20_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, retval_0_i8_reg_480, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (retval_0_i8_reg_480 = ap_const_lv5_5) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (retval_0_i8_reg_480 = ap_const_lv5_B) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            p_str_20_ce0 <= ap_const_logic_1;
        else 
            p_str_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str_21_addr_gep_fu_414_p3 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);

    p_str_21_address0_assign_proc : process(retval_0_i8_reg_480, p_str_21_addr_gep_fu_414_p3, ap_phi_mux_j_phi_fu_572_p4, ap_condition_614)
    begin
        if ((ap_const_boolean_1 = ap_condition_614)) then
            if ((retval_0_i8_reg_480 = ap_const_lv5_4)) then 
                p_str_21_address0 <= p_str_21_addr_gep_fu_414_p3;
            elsif ((retval_0_i8_reg_480 = ap_const_lv5_A)) then 
                p_str_21_address0 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);
            else 
                p_str_21_address0 <= "XXX";
            end if;
        else 
            p_str_21_address0 <= "XXX";
        end if; 
    end process;


    p_str_21_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, retval_0_i8_reg_480, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (retval_0_i8_reg_480 = ap_const_lv5_4) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (retval_0_i8_reg_480 = ap_const_lv5_A) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            p_str_21_ce0 <= ap_const_logic_1;
        else 
            p_str_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str_22_addr_gep_fu_422_p3 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);

    p_str_22_address0_assign_proc : process(retval_0_i8_reg_480, p_str_22_addr_gep_fu_422_p3, ap_phi_mux_j_phi_fu_572_p4, ap_condition_614)
    begin
        if ((ap_const_boolean_1 = ap_condition_614)) then
            if ((retval_0_i8_reg_480 = ap_const_lv5_3)) then 
                p_str_22_address0 <= p_str_22_addr_gep_fu_422_p3;
            elsif ((retval_0_i8_reg_480 = ap_const_lv5_9)) then 
                p_str_22_address0 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);
            else 
                p_str_22_address0 <= "XXX";
            end if;
        else 
            p_str_22_address0 <= "XXX";
        end if; 
    end process;


    p_str_22_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, retval_0_i8_reg_480, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (retval_0_i8_reg_480 = ap_const_lv5_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (retval_0_i8_reg_480 = ap_const_lv5_9) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            p_str_22_ce0 <= ap_const_logic_1;
        else 
            p_str_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str_23_addr_gep_fu_430_p3 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);

    p_str_23_address0_assign_proc : process(retval_0_i8_reg_480, p_str_23_addr_gep_fu_430_p3, ap_phi_mux_j_phi_fu_572_p4, ap_condition_614)
    begin
        if ((ap_const_boolean_1 = ap_condition_614)) then
            if ((retval_0_i8_reg_480 = ap_const_lv5_2)) then 
                p_str_23_address0 <= p_str_23_addr_gep_fu_430_p3;
            elsif ((retval_0_i8_reg_480 = ap_const_lv5_8)) then 
                p_str_23_address0 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);
            else 
                p_str_23_address0 <= "XXX";
            end if;
        else 
            p_str_23_address0 <= "XXX";
        end if; 
    end process;


    p_str_23_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, retval_0_i8_reg_480, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (retval_0_i8_reg_480 = ap_const_lv5_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (retval_0_i8_reg_480 = ap_const_lv5_8) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            p_str_23_ce0 <= ap_const_logic_1;
        else 
            p_str_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str_24_addr_gep_fu_438_p3 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);

    p_str_24_address0_assign_proc : process(retval_0_i8_reg_480, p_str_24_addr_gep_fu_438_p3, ap_phi_mux_j_phi_fu_572_p4, ap_condition_614)
    begin
        if ((ap_const_boolean_1 = ap_condition_614)) then
            if ((retval_0_i8_reg_480 = ap_const_lv5_1)) then 
                p_str_24_address0 <= p_str_24_addr_gep_fu_438_p3;
            elsif ((retval_0_i8_reg_480 = ap_const_lv5_7)) then 
                p_str_24_address0 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);
            else 
                p_str_24_address0 <= "XXX";
            end if;
        else 
            p_str_24_address0 <= "XXX";
        end if; 
    end process;


    p_str_24_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, retval_0_i8_reg_480, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (retval_0_i8_reg_480 = ap_const_lv5_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (retval_0_i8_reg_480 = ap_const_lv5_7) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            p_str_24_ce0 <= ap_const_logic_1;
        else 
            p_str_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str_25_address0 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);

    p_str_25_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            p_str_25_ce0 <= ap_const_logic_1;
        else 
            p_str_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str_9_address0 <= ap_phi_mux_j_phi_fu_572_p4(3 - 1 downto 0);

    p_str_9_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            p_str_9_ce0 <= ap_const_logic_1;
        else 
            p_str_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    string_r_address0 <= i_reg_467(4 - 1 downto 0);

    string_r_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            string_r_ce0 <= ap_const_logic_1;
        else 
            string_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_677_p4 <= i_reg_467(63 downto 1);
    trunc_ln488_fu_705_p1 <= i_1_reg_555(4 - 1 downto 0);
    trunc_ln491_10_fu_823_p1 <= p_str_21_q0(6 - 1 downto 0);
    trunc_ln491_11_fu_814_p1 <= p_str_20_q0(6 - 1 downto 0);
    trunc_ln491_12_fu_805_p1 <= p_str_19_q0(6 - 1 downto 0);
    trunc_ln491_13_fu_796_p1 <= p_str_18_q0(6 - 1 downto 0);
    trunc_ln491_14_fu_787_p1 <= p_str_17_q0(6 - 1 downto 0);
    trunc_ln491_15_fu_778_p1 <= p_str_16_q0(6 - 1 downto 0);
    trunc_ln491_16_fu_769_p1 <= p_str_15_q0(6 - 1 downto 0);
    trunc_ln491_17_fu_760_p1 <= p_str_14_q0(6 - 1 downto 0);
    trunc_ln491_18_fu_751_p1 <= p_str_13_q0(6 - 1 downto 0);
    trunc_ln491_19_fu_742_p1 <= p_str_12_q0(6 - 1 downto 0);
    trunc_ln491_1_fu_904_p1 <= p_str_24_q0(6 - 1 downto 0);
    trunc_ln491_20_fu_733_p1 <= p_str_11_q0(6 - 1 downto 0);
    trunc_ln491_21_fu_724_p1 <= p_str_10_q0(6 - 1 downto 0);
    trunc_ln491_22_fu_715_p1 <= p_str_9_q0(6 - 1 downto 0);
    trunc_ln491_2_fu_895_p1 <= p_str_23_q0(6 - 1 downto 0);
    trunc_ln491_3_fu_886_p1 <= p_str_22_q0(6 - 1 downto 0);
    trunc_ln491_4_fu_877_p1 <= p_str_21_q0(6 - 1 downto 0);
    trunc_ln491_5_fu_868_p1 <= p_str_20_q0(6 - 1 downto 0);
    trunc_ln491_6_fu_859_p1 <= p_str_19_q0(6 - 1 downto 0);
    trunc_ln491_7_fu_850_p1 <= p_str_24_q0(6 - 1 downto 0);
    trunc_ln491_8_fu_841_p1 <= p_str_23_q0(6 - 1 downto 0);
    trunc_ln491_9_fu_832_p1 <= p_str_22_q0(6 - 1 downto 0);
    trunc_ln491_fu_913_p1 <= p_str_25_q0(7 - 1 downto 0);
    zext_ln491_10_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_11_fu_814_p1),7));
    zext_ln491_11_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_12_fu_805_p1),7));
    zext_ln491_12_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_13_fu_796_p1),7));
    zext_ln491_13_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_14_fu_787_p1),7));
    zext_ln491_14_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_15_fu_778_p1),7));
    zext_ln491_15_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_16_fu_769_p1),7));
    zext_ln491_16_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_17_fu_760_p1),7));
    zext_ln491_17_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_18_fu_751_p1),7));
    zext_ln491_18_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_19_fu_742_p1),7));
    zext_ln491_19_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_20_fu_733_p1),7));
    zext_ln491_1_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_2_fu_895_p1),7));
    zext_ln491_20_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_21_fu_724_p1),7));
    zext_ln491_21_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_22_fu_715_p1),7));
    zext_ln491_2_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_3_fu_886_p1),7));
    zext_ln491_3_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_4_fu_877_p1),7));
    zext_ln491_4_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_5_fu_868_p1),7));
    zext_ln491_5_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_6_fu_859_p1),7));
    zext_ln491_6_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_7_fu_850_p1),7));
    zext_ln491_7_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_8_fu_841_p1),7));
    zext_ln491_8_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_9_fu_832_p1),7));
    zext_ln491_9_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_10_fu_823_p1),7));
    zext_ln491_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln491_1_fu_904_p1),7));
end behav;
